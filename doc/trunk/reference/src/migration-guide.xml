<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="migration-guide" xmlns="http://docbook.org/ns/docbook" 
   xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
   <title>Migration Guide</title>
   <info>
      <author>
         <personname>
            <firstname>Joachim</firstname>
            <surname>Bauch</surname>
         </personname>
         <email>jojo@struktur.de</email>
      </author>
      <releaseinfo>0.6-dev</releaseinfo>
   </info>
   <section xml:id="preface">
      <title>Preface</title>
      <para>This document describes API differences between the Macromedia Flash 
         Communication Server / Adobe Flash Media Server and Red5.  It aims at helping
         migrate existing applications to Red5.</para>
      <para>If you don't have an application in Red5 yet, please read the tutorial about
      <link linkend="new-applications">howto create new applications</link> first.</para>
   </section>
   <section xml:id="application-callbacks">
      <title>Application callbacks</title>
      <para>When implementing serverside applications, one of the most important
         functionalities is to get notified about clients that connect or disconnect
         and to be informed about the creation of new instances of the application.</para>
      <section xml:id="interface-iscopehandler">
         <title>Interface IScopeHandler</title>
         <para>Red5 specifies these actions in the interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IScopeHandler.html">IScopeHandler</link>.  See the API 
            documentation for further details.</para>
      </section>
      <section xml:id="class-applicationadapter">
         <title>Class ApplicationAdapter</title>
         <para>As some methods may be called multiple times for one request (e.g. <citetitle>connect</citetitle> 
            will be called once for every scope in the tree the client connects to), 
            the class <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link> defines additional methods.</para>
         <para>This class usually is used as base class for new applications.</para>
         <para>Here is a short overview of methods of the FCS / FMS <citetitle>application</citetitle> class and 
            their corresponding methods of <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link> in Red5:</para>
         <informaltable>
            <tgroup cols="2">
  
               <thead>
                  <row>
                     <entry>
                        <para>FCS / FMS</para>
                     </entry>
                     <entry>
                        <para>Red5</para>
                     </entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>
                        <para>onAppStart</para>
                     </entry>
                     <entry>
                        <para>
                           appStart <?linebreak?>
                           roomStart
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>onAppStop</para>
                     </entry>
                     <entry>
                        <para>
                           appStop <?linebreak?> 
                           roomStop
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>onConnect</para>
                     </entry>
                     <entry>
                        <para>
                           appConnect <?linebreak?>
                           roomConnect <?linebreak?>
                           appJoin <?linebreak?>
                           roomJoin
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>onDisconnect</para>
                     </entry>
                     <entry>
                        <para>
                           appDisconnect <?linebreak?>
                           roomDisconnect <?linebreak?>
                           appLeave <?linebreak?>
                           roomLeave
                        </para>
                     </entry>
                  </row>
               </tbody>
            </tgroup>
         </informaltable>
         <para>The <citetitle>app*</citetitle> methods are called for the main application, the <citetitle>room*</citetitle> methods 
            are called for rooms (i.e. instances) of the application.</para>
         <para>You can also also use the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link> to check for streams, shared 
            objects, or subscribe them.  See the API documentation for further details.</para>
         <section xml:id="execution-order-of-connection-methods">
            <title>Execution order of connection methods</title>
            <para>Assuming you connect to <citetitle>rtmp://server/app/room1/room2</citetitle>
            </para>
            <para>At first, the connection is established, so the user "connects" to all scopes 
               that are traversed up to <citetitle>room2</citetitle>:</para>
            <orderedlist numeration="arabic">
               <listitem>
                  <para>
                     <citetitle>app</citetitle>     (-&gt; appConnect)</para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>room1</citetitle>   (-&gt; roomConnect)</para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>room2</citetitle>   (-&gt; roomConnect)</para>
               </listitem>
            </orderedlist>
            <para>After the connection is established, the client object is retrieved and if 
               it's the first connection by this client to the scope, he "joins" the scopes:</para>
            <orderedlist numeration="arabic">
               <listitem>
                  <para>
                     <citetitle>app</citetitle>     (-&gt; appJoin)</para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>room1</citetitle>   (-&gt; roomJoin)</para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>room2</citetitle>   (-&gt; roomJoin)</para>
               </listitem>
            </orderedlist>
            <para>If the same client establishes a second connection to the same scope, only 
               the <citetitle>connect</citetitle> methods will be called.  If you conect to partially the same 
               scopes, only a few <citetitle>join</citetitle> methods might be called, e.g. 
               <citetitle>rtmp://server/app/room1/room3</citetitle> will trigger</para>
            <orderedlist numeration="arabic">
               <listitem>
                  <para>
                     <citetitle>appConnect("app")</citetitle>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>joinConnect("room1")</citetitle>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>joinConnect("room3")</citetitle>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <citetitle>roomJoin("room3")</citetitle>
                  </para>
               </listitem>
            </orderedlist>
            <para>The <citetitle>appStart</citetitle> method currently is only called once during startup of Red5 
               as it currently can't unload/load applications like FCS/FMS does. 
               The <citetitle>roomStart</citetitle> methods are called when the first client connects to a room.</para>
         </section>
      </section>
      <section xml:id="accepting-rejecting-clients">
         <title>Accepting / rejecting clients</title>
         <para>FCS / FMS provide the methods <citetitle>acceptConnection</citetitle> and <citetitle>rejectConnection</citetitle> to 
            accept and reject new clients.  To allow clients to connect, no special 
            action is required by Red5 applications, the <citetitle>*Connect</citetitle> methods just need 
            to return <citetitle>true</citetitle> in this case.</para>
         <para>If a client should not be allowed to connect, the method <citetitle>rejectClient</citetitle> 
            can be called which is implemented by the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link> class. Any 
            parameter passed to <citetitle>rejectClient</citetitle> is available as the <citetitle>application</citetitle> 
            property of the status object that is returned to the caller.</para>
      </section>
   </section>
   <section xml:id="current-connection-and-client">
      <title>Current connection and client</title>
      <para>Red5 supports two different ways to access the current connection from an 
         invoked method.  The connection can  be used to get the active client and 
         the scope he is connected to.  The first possibility uses the "magic" <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/Red5.html">Red5</link> 
         object:</para>
      <programlisting language="java">
<![CDATA[
import org.red5.server.api.IClient;
import org.red5.server.api.IConnection;
import org.red5.server.api.IScope;
import org.red5.server.api.Red5;

public void whoami() {
    IConnection conn = Red5.getConnectionLocal();
    IClient client = conn.getClient();
    IScope scope = conn.getScope();
    // ...
}
]]>
      </programlisting>
      <para>The second possiblity requires the method to be defined with an argument of
type <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IConnection.html">IConnection</link> as implicit first parameter which is automatically added
by Red5 when a client calls the method:</para>
      <programlisting language="java">
<![CDATA[         
import org.red5.server.api.IClient;
import org.red5.server.api.IConnection;
import org.red5.server.api.IScope;

public void whoami(IConnection conn) {
    IClient client = conn.getClient();
    IScope scope = conn.getScope();
    // ...
}
]]>
      </programlisting>
   </section>
   <section xml:id="additional-handlers">
      <title>Additional handlers</title>
      <para>For many applications, existing classes containing application logic that 
         is not related to Red5 are required to be reused.  In order to make them 
         available for clients connecting through RTMP, these classes need to be 
         registered as handlers in Red5.</para>
      <variablelist role="definition_list">
         <varlistentry>
            <term>There are currently two ways to register these handlers:</term>
            <listitem>
               <orderedlist numeration="arabic">
                  <listitem>
                     <para>By adding them to the configuration files.</para>
                  </listitem>
                  <listitem>
                     <para>By registering them manually from the application code.</para>
                  </listitem>
               </orderedlist>
            </listitem>
         </varlistentry>
      </variablelist>
      <para>The handlers can be executed by clients with code similar to this:</para>
      <programlisting>
<![CDATA[ 
nc = new NetConnection();
nc.connect("rtmp://localhost/myapp");
nc.call("handler.method", nc, "Hello world!");
]]>
      </programlisting>
      <para>If a handler is requested, Red5 always looks it up in the custom scope 
         handlers before checking the handlers that have been set up in the context 
         through the configuration file.
      </para>
      <section xml:id="handlers-in-configuration-files">
         <title>Handlers in configuration files</title>
         <para>This method is best suited for handlers that are common to all scopes the 
            application runs in and that don't need to change during the lifetime of 
            an application.
         </para>
         <para>To register the class <citetitle>com.fancycode.red5.HandlerSample</citetitle> as handler <citetitle>sample</citetitle>, 
            the following bean needs to be added to <citetitle>WEB-INF/red5-web.xml</citetitle>:</para>
         <programlisting>
          <![CDATA[ 
<bean id="sample.service" 
   class="com.fancycode.red5.HandlerSample" 
   singleton="true" />
          ]]>
         </programlisting>
         <para>Note that the id of the bean is constructed as the name of the handler 
            (here <citetitle>sample</citetitle>) and the keyword <citetitle>service</citetitle>.</para>
      </section>
      <section xml:id="handlers-from-application-code">
         <title>Handlers from application code</title>
         <para>All applications that use handlers which are different for the various 
            scopes or want to change handlers, need a way to register them from the
            serverside code.  These handlers always override the handlers configured in 
            <citetitle>red5-web.xml</citetitle>.  The methods required for registration are described in the 
            interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceHandlerProvider.html">IServiceHandlerProvider</link> which is implemented by 
            <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link>.</para>
         <para>The same class as above can be registered using this code:</para>
         <programlisting language="java">
          <![CDATA[ 
public boolean appStart(IScope app) {
    if (!super.appStart(scope))
        return false;

    Object handler = new com.fancycode.red5.HandlerSample();
    app.registerServiceHandler("sample", handler);
    return true;
}
         ]]>
         </programlisting>
         <para>Note that in this example, only the application scope has the <citetitle>sample</citetitle>
handler but not the subscopes!  If the handler should be available in the
rooms as well, it must be registered in <citetitle>roomStart</citetitle> for the room scopes.</para>
      </section>
   </section>
   <section xml:id="calls-to-client-methods">
      <title>Calls to client methods</title>
      <para>To call methods from your Red5 application on the client, you will first need 
         a reference to the current connection object:</para>
      <programlisting language="java">
       <![CDATA[ 
import org.red5.server.api.IConnection;
import org.red5.server.api.Red5;
import org.red5.server.api.service.IServiceCapableConnection;
...
IConnection conn = Red5.getConnectionLocal();
      ]]>
      </programlisting>
      <para>If the connection implements the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceCapableConnection.html">IServiceCapableConnection</link> interface, it 
         supports calling methods on the other end:</para>
      <programlisting language="java">
         <![CDATA[ 
if (conn instanceof IServiceCapableConnection) {
    IServiceCapableConnection sc = (IServiceCapableConnection) conn;
    sc.invoke("the_method", new Object[]{"One", 1});
}
      ]]>
      </programlisting>
      <para>If you need the result of the method call, you must provide a class that 
         implements the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IPendingServiceCallback.html">IPendingServiceCallback</link> interface:</para>
      <programlisting language="java">
         <![CDATA[ 
import org.red5.server.api.service.IPendingService;
import org.red5.server.api.service.IPendingServiceCallback;

class MyCallback implements IPendingServiceCallback {

    public void resultReceived(IPendingServiceCall call) {
        // Do something with "call.getResult()"
    }
}
      ]]>
      </programlisting>
      <para>The method call looks now like this:</para>
      <programlisting language="java">
      <![CDATA[ 
if (conn instanceof IServiceCapableConnection) {
    IServiceCapableConnection sc = (IServiceCapableConnection) conn;
    sc.invoke("the_method", new Object[]{"One", 1}, new MyCallback());
}
      ]]>
      </programlisting>
      <para>Of course you can implement this interface in your application and pass a 
         reference to the application instance.</para>
   </section>
   <section xml:id="sharedobjects">
      <title>SharedObjects</title>
      <para>The methods to access shared objects from an application are specified in the 
         interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectService.html">ISharedObjectService</link>.</para>
      <para>When dealing with shared objects in serverside scripts, special care must be 
         taken about the scope they are created in.</para>
      <para>To create a new shared object when a room is created, you can override the 
         method <citetitle>roomStart</citetitle> in your application:</para>
      <programlisting language="java">
      <![CDATA[ 
import org.red5.server.adapter.ApplicationAdapter;
import org.red5.server.api.IScope;
import org.red5.server.api.so.ISharedObject;

public class SampleApplication extends ApplicationAdapter {

  public boolean roomStart(IScope room) {
      if (!super.roomStart(room))
          return false;

      createSharedObject(room, "sampleSO", true);
      ISharedObject so = getSharedObject(room, "sampleSO");

      // Now you could do something with the shared object...

      return true;
  }

}
      ]]>
      </programlisting>
      <para>Now everytime a first user connects to a room of a application, e.g. through
         <citetitle>rtmp://server/application/room1</citetitle>, a shared object <citetitle>sampleSO</citetitle> is created by 
         the server.</para>
      <para>If a shared object should be created for connections to the main application, 
         e.g. <citetitle>rtmp://server/application</citetitle>, the same must be done in the method
         <citetitle>appStart</citetitle>.</para>
      <para>For further informations about the possible methods a shared object provides 
         please refer to the api documentation of the interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObject.html">ISharedObject</link>.</para>
      <section xml:id="serverside-change-listeners">
         <title>Serverside change listeners</title>
         <para>To get notified about changes of the shared object similar to <citetitle>onSync</citetitle> in 
            FCS / FMS, a listener must implement the interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectListener.html">ISharedObjectListener</link>:</para>
         <programlisting language="java">
         <![CDATA[ 
import org.red5.server.api.so.ISharedObject;
import org.red5.server.api.so.ISharedObjectListener;

public class SampleSharedObjectListener
       implements ISharedObjectListener {

  public void onSharedObjectUpdate(ISharedObject so,
                                   String key, Object value) {
      // The attribute &lt;key&gt; of the shared object &lt;so&gt;
      // was changed to &lt;value&gt;.
  }

  public void onSharedObjectDelete(ISharedObject so, String key) {
      // The attribute &lt;key&gt; of the shared object &lt;so&gt; was deleted.
  }

  public void onSharedObjectSend(ISharedObject so,
                                 String method, List params) {
      // The handler &lt;method&gt; of the shared object &lt;so&gt; was called
      // with the parameters &lt;params&gt;.
  }

  // Other methods as described in the interface...
}
         ]]>
         </programlisting>
         <para>Additionally, the listener must get registered at the shared object:</para>
         <programlisting language="java">
         <![CDATA[ 
ISharedObject so = getSharedObject(scope, "sampleSO");
so.addSharedObjectListener(new SampleSharedObjectListener())
         ]]>
         </programlisting>
      </section>
      <section xml:id="changing-from-application-code">
         <title>Changing from application code</title>
         <para>A shared object can be changed by the server as well:</para>
         <programlisting language="java">
         <![CDATA[ 
ISharedObject so = getSharedObject(scope, "sampleSO");
so.setAttribute("fullname", "Sample user");
         ]]>
         </programlisting>
         <para>Here all subscribed clients as well as the registered handlers are notified 
            about the new / changed attribute.</para>
         <para>If multiple actions on a shared object should be combined in one update 
            event to the subscribed clients, the methods <citetitle>beginUpdate</citetitle> and <citetitle>endUpdate</citetitle> 
            must be used:</para>
         <programlisting language="java">
         <![CDATA[ 
ISharedObject so = getSharedObject(scope, "sampleSO");
so.beginUpdate();
so.setAttribute("One", "1");
so.setAttribute("Two", "2");
so.removeAttribute("Three");
so.endUpdate();
         ]]>
         </programlisting>
         <para>The serverside listeners will receive their update notifications through 
            separate method calls as without the <citetitle>beginUpdate</citetitle> and <citetitle>endUpdate</citetitle>.</para>
      </section>
      <section xml:id="sharedobject-event-handlers">
         <title>SharedObject event handlers</title>
         <para>Calls to shared object handlers through <citetitle>remote_so.send(&lt;handler&gt;, &lt;args&gt;)</citetitle> 
            from a Flash client or the corresponding serverside call can be mapped to 
            methods in Red5.  Therefore a handler must get registered through a method 
            of the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectHandlerProvider.html">ISharedObjectHandlerProvider</link> interface similar to the application 
            handlers:</para>
         <programlisting language="java">
         <![CDATA[ 
package com.fancycode.red5;

class MySharedObjectHandler {

    public void myMethod(String arg1) {
        // Now do something
    }

}

...
ISharedObject so = getSharedObject(scope, "sampleSO");
so.registerServiceHandler(new MySharedObjectHandler());
         ]]>
         </programlisting>
         <para>Handlers with a given name can be registered as well:</para>
         <programlisting language="java">
         <![CDATA[
ISharedObject so = getSharedObject(scope, "sampleSO");
so.registerServiceHandler("one.two", new MySharedObjectHandler());
         ]]>
         </programlisting>
         <para>Here, the method could be called through <citetitle>one.two.myMethod</citetitle>.</para>
         <para>Another way to define event handlers for SharedObjects is to add them to the 
            <citetitle>red5-web.xml</citetitle> similar to the file-based application handlers.  The beans 
            must have a name of <citetitle>&lt;SharedObjectName&gt;.&lt;DottedServiceName&gt;.soservice</citetitle>, so 
            the above example could also be defined with:</para>
         <programlisting>
         <![CDATA[
<bean id="sampleSO.one.two.soservice" 
   class="com.fancycode.red5.MySharedObjectHandler" 
   singleton="true" />
         ]]>
         </programlisting>
      </section>
   </section>
   <section xml:id="persistence">
      <title>Persistence</title>
      <para>Persistence is used so properties of objects can be used even after the server 
         has been restarted.  In FCS / FMS usually local shared objects on the 
         serverside are used for this.</para>
      <para>Red5 allows arbitrary objects to be persistent, all they need to do is 
         implement the interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/persistence/IPersistable.html">IPersistable</link>.  Basically these objects have a <citetitle>type</citetitle>, 
         a <citetitle>path</citetitle>, a <citetitle>name</citetitle> (all strings) and know how to serialize and deserialize 
         themselves.</para>
      <para>Here is a sample of serialization and deserialization:</para>
      <programlisting language="java">
      <![CDATA[
import java.io.IOException;
import org.red5.io.object.Input;
import org.red5.io.object.Output;
import org.red5.server.api.persistence.IPersistable;

class MyPersistentObject implements IPersistable {

  // Attribute that will be made persistent
  private String data = "My persistent value";

  void serialize(Output output) throws IOException {
      // Save the objects's data.
      output.writeString(data);
  }

  void deserialize(Input input) throws IOException {
      // Load the object's data.
      data = input.readString();
  }

  // Other methods as described in the interface...
}
      ]]>
      </programlisting>
      <para>To save or load this object, the following code can be used:</para>
      <programlisting language="java">
      <![CDATA[
import org.red5.server.adapter.ApplicationAdapter;
import org.red5.server.api.IScope;
import org.red5.server.api.Red5;
import org.red5.server.api.persistence.IPersistenceStore;

class MyApplication extends ApplicationAdapter {

  private void saveObject(MyPersistentObject object) {
      // Get current scope.
      IScope scope = Red5.getConnectionLocal().getScope();
      // Save object in current scope.
      scope.getStore().save(object);
  }

  private void loadObject(MyPersistentObject object) {
      // Get current scope.
      IScope scope = Red5.getConnectionLocal().getScope();
      // Load object from current scope.
      scope.getStore().load(object);
  }

}
      ]]>
      </programlisting>
      <para>If no custom objects are required for an application, but data must be stored 
         for future reuse, it can be added to the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IScope.html">IScope</link> through the interface 
         <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IAttributeStore.html">IAttributeStore</link>.  In scopes, all attributes that don't start with 
         <citetitle>IPersistable.TRANSIENT_PREFIX</citetitle> are persistent.</para>
      <para>The backend that is used to store objects is configurable.  By default 
         persistence in memory and in the filesystem is available.</para>
      <para>When using filesystem persistence for every object a file is created in 
         <![CDATA["webapps/<app>/persistence/<type>/<path>/<name>.red5"]]>, e.g. for a shared 
         object "theSO" in the connection to "rtmp://server/myApp/room1" a file at 
         "webapps/myApp/persistence/SharedObject/room1/theSO.red5" would be created.</para>
   </section>
   <section xml:id="periodic-events">
      <title>Periodic events</title>
      <para>Applications that need to perform tasks regularly can use the <citetitle>setInterval</citetitle> 
         in FCS / FMS to schedule methods for periodic execution.</para>
      <para>Red5 provides a scheduling service (<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/ISchedulingService.html">ISchedulingService</link>) that is implemented 
         by <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">ApplicationAdapter</link> like most other services.  The service can register 
         an object (which needs to implement the <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/IScheduledJob.html">IScheduledJob</link> interface) whose 
         <citetitle>execute</citetitle> method is called in a given interval.</para>
      <para>To register an object, code like this can be used:</para>
      <programlisting language="java">
       <![CDATA[
import org.red5.server.api.IScope;
import org.red5.server.api.IScheduledJob;
import org.red5.server.api.ISchedulingService;
import org.red5.server.adapter.ApplicationAdapter;

class MyJob implements IScheduledJob {

  public void execute(ISchedulingService service) {
      // Do something
  }
}

public class SampleApplication extends ApplicationAdapter {

  public boolean roomStart(IScope room) {
      if (!super.roomStart(room))
          return false;

      // Schedule invokation of job every 10 seconds.
      String id = addScheduledJob(10000, new MyJob());
      room.setAttribute("MyJobId", id);
      return true;
  }
}
      ]]>
      </programlisting>
      <para>The id that is returned by <citetitle>addScheduledJob</citetitle> can be used later to stop 
         execution of the registered job:</para>
      <programlisting language="java">
      <![CDATA[
public void roomStop(IScope room) {
    String id = (String) room.getAttribute("MyJobId");
    removeScheduledJob(id);
    super.roomStop(room);
}
      ]]>
      </programlisting>
   </section>
   <section xml:id="remoting">
      <title>Remoting</title>
      <para>Remoting can be used by non-rtmp clients to invoke methods in Red5.  Another 
         possibility is to call methods from Red5 to other servers that provide a 
         remoting service.</para>
      <section xml:id="remoting-server">
         <title>Remoting server</title>
         <para>Services that should be available for clients need to be registered the same 
            way as additional application handlers are registered.  See above for details.</para>
         <para>To enable remoting support for an application, the following section must be 
            added to the <citetitle>WEB-INF/web.xml</citetitle> file:</para>
         <programlisting>
         <![CDATA[
<servlet>
   <servlet-name>gateway</servlet-name>
   <servlet-class>
      org.red5.server.net.servlet.AMFGatewayServlet
   </servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>gateway</servlet-name>
   <url-pattern>/gateway/*</url-pattern>
</servlet-mapping>
         ]]>
         </programlisting>
         <para>The path specified in the <citetitle>&lt;url-pattern&gt;</citetitle> tag (here <citetitle>gateway</citetitle>) can be used 
            by the remoting client as connection url.  If this example would have been 
            specified for an application <citetitle>myApp</citetitle>, the URL would be:</para>
         <programlisting>
http://localhost:5080/myApp/gateway
         </programlisting>
         <para>Methods invoked through this connection will be executed in the context of 
            the application scope.  If the methods should be executed in subscopes, the 
            path to the subscopes must be added to the URL like:</para>
         <programlisting>http://localhost:5080/myApp/gateway/room1/room2</programlisting>
      </section>
      <section xml:id="remoting-client">
         <title>Remoting client</title>
         <para>The class <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/RemotingClient.html">RemotingClient</link> defines all methods that are required to call 
            methods through the remoting protocol.</para>
         <para>The following code serves as example about how to use the remoting client:</para>
         <programlisting language="java">
         <![CDATA[
import org.red5.server.net.remoting.RemotingClient;

String url = "http://server/path/to/service";
RemotingClient client = new RemotingClient(url);
Object[] args = new Object[]{"Hello world!"};
Object result = client.invokeMethod("service.remotingMethod", args);
// Now do something with the result
         ]]>
         </programlisting>
         <para>By default, a timeout of 30 seconds will be used per call, this can be 
            changed by passing a second parameter to the constructor defining the maximum 
            timeout in milliseconds.</para>
         <para>The remoting headers <citetitle>AppendToGatewayUrl</citetitle>, <citetitle>ReplaceGatewayUrl</citetitle> and 
            <citetitle>RequestPersistentHeader</citetitle> are handled automatically by the Red5 remoting 
            client.</para>
         <para>Some methods may take a rather long time on the called server to complete, so 
            it's better to perform the call asynchronously to avoid blocking a thread in 
            Red5.  Therefore an object that implements the interface <link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/IRemotingCallback.html">IRemotingCallback</link> 
            must be passed as additional parameter:</para>
         <programlisting language="java">
         <![CDATA[
import org.red5.server.net.remoting.RemotingClient;
import org.red5.server.net.remoting.IRemotingCallback;

public class CallbackHandler implements IRemotingCallback {

  void errorReceived(RemotingClient client, String method,
                     Object[] params, Throwable error) {
      // An error occurred while performing the remoting call.
  }

  void resultReceived(RemotingClient client, String method,
                      Object[] params, Object result) {
      // The result was received from the server.
  }
}

String url = "http://server/path/to/service";
RemotingClient client = new RemotingClient(url);
Object[] args = new Object[]{"Hello world!"};
IRemotingCallback callback = new CallbackHandler();
client.invokeMethod("service.remotingMethod", args, callback);
         ]]>
         </programlisting>
      </section>
   </section>
   <section xml:id="streams">
      <title>Streams</title>
      <para>TODO: How can streams be accessed from an application?</para>
   </section>
   
</chapter>