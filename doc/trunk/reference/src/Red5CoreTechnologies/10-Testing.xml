<?xml version='1.0' ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="TestingRed5">
	<title>Testing Red5</title>
	<section xml:id="TestingRed5Overview">
		<title>Overview</title>
		<para>As of version 0.8, the Red5 Testing framework has been modified and updated. The unit-tests have been updated to pass, and a automated system-testing and continuous integration framework has been added.
			This document attempts to explain the thoughts and architecture involved so as to facilitate review by the Red5 core team.</para>
	</section>
	<section xml:id="TestingRed5HowtoStartTestingWithoutReadingThisChapter">
		<title>How to Start Testing Without Reading This Chapter</title>
		<para>To see the results of the Red5 continuous build server (this URL may change), go to:</para>
		<literallayout> 
[http://build.theyard.net/]
</literallayout>
		<para>The build server runs after every check-in, as well as every night.&amp;nbsp; We test against JDK5 and JDK6.&amp;nbsp;</para>
		<para>To run all the Red5 unit tests yourself, check out the Red5 tree, and run:</para>
		<literallayout> 
ant run-tests
</literallayout>
		<para>To see the results, open this file in a browser</para>
		<literallayout> 
doc/test/index.html
</literallayout>
		<para>To run all the Red5 system tests, make sure you don't already have red5 running then in one terminal type:</para>
		<literallayout> 
ant run-tests-server
</literallayout>
		<para>Then open this file in a browser.&amp;nbsp; When the security dialog comes up, give it access to your camera, and select the box to remember the setting (if you want it to auto-run in the future):</para>
		<literallayout> 
test/fixtures/selftest.swf
</literallayout>
		<para>You can find all log files generate by the red5 test server in:</para>
		<literallayout> 
bin/testcases/testreports/dist/log
</literallayout>
		<para>You can find the documentation for what the system tests do here (and can add to it by just putting ASDoc style comments in any System tests you add):</para>
		<note>
<para>
			 
			[http://build.theyard.net/job/red5_flash_selftest_trunk_flex3.1/javadoc/ Current Flash System Tests]

</para>
</note>
		<para>And that's it.</para>
	</section>
	<section xml:id="TestingRed5WhoShouldReadThisChapterInDepth">
		<title>Who Should Read This Chapter In Depth?</title>
		<para>This chapter is targeted at people who are:</para>
		<orderedlist>
			<listitem>
				<para>Modifying Red5 code directly and want to make sure their code works.</para>
			</listitem>
			<listitem>
				<para>Interested in how Red5 is working to improve quality, and has some experience with software testing.</para>
			</listitem>
			<listitem>
				<para>People who have found a bug in Red5, and want to submit a patch with a Unit Test or System Test that will catch regressions.</para>
			</listitem>
			<listitem>
				<para>Goblins.</para>
			</listitem>
		</orderedlist>
	</section>
	<section xml:id="TestingRed5Red5TestingStrategy">
		<title>Red5 Testing Strategy</title>
		<para>The Red5 Testing Strategy has 5 components to it:</para>
		<informaltable>
			<tr>
				<td>\# </td>
				<td>Type </td>
				<td>Description </td>
			</tr>
			<tr>
				<td>1 </td>
				<td>Code </td>
				<td>Write great code; we've done this from day one and see no reason to stop now. </td>
			</tr>
			<tr>
				<td>2 </td>
				<td>Unit Tests </td>
				<td></td>
			</tr>
		</informaltable>
		<para>|| 3 || Functional Tests | Write functional tests to simulate network interactions. \\

			<emphasis role="bold">This is not yet implemented.</emphasis> We plan to do this in the future using RTMPClient, but any help the community can give here is appreciated. ||
		</para>
		<informaltable>
			<tr>
				<td>4 </td>
				<td>System Tests </td>
				<td>Use flash-based system-tests (using 
					<link xl:href="http://asunit.org/">AsUnit</link>) that make sure end-to-end interaction with Adobe's flash player works as expected. For example, we test that we can connect from Flash via RTMP, we can play back pre-recorded FLV files, and we can publish from a Camera. 
				</td>
			</tr>
			<tr>
				<td>5 </td>
				<td>Continuous Building </td>
				<td>Build and run all tests every time someone checks in to make sure all tests still pass. Currently the continuous server can be found here (but it will move):
					<link xl:href="http://build.theyard.net/">http://build.theyard.net/</link> 
				</td>
			</tr>
		</informaltable>
	</section>
	<section xml:id="TestingRed5Red5TestingProps">
		<title>Red5 Testing Props</title>
		<para>Major props go to the following folks:</para>
		<orderedlist>
			<listitem>
				<para>The red5 development team because, well, test frameworks don't mean shit if you don't got good stuff to test.</para>
			</listitem>
			<listitem>
				<para>Thijs, who set up the initial red5 build server, and showed me how to get get Apache and Tomcat working nicely together.</para>
			</listitem>
		</orderedlist>
	</section>
	<section xml:id="TestingRed5UnitTesting">
		<title>Unit Testing</title>
		<section xml:id="TestingRed5Purpose">
			<title>Purpose</title>
			<para>The purpose of a unit test is to make sure a java object operates according to its specification, regardless of how it is plugged in with other objects. For a good overview of check out this 
				<link xl:href="http://en.wikipedia.org/wiki/Unit_testing">Wikipedia Unit Testing web page</link>.
				For example, you can (and we do) have Unit Tests that test we're encoding and decoding data from AMF codec's correctly using Mock Objects, that test whether or not we can load information from Spring, and whether or not we can inject Meta Data into FLV viles correctly.
			</para>
		</section>
		<section xml:id="TestingRed5Technology">
			<title>Technology</title>
			<para>Red5 uses the 
				<link xl:href="http://junit.org/">JUnit</link> unit testing framework. If you're not familiar with that suite, please check it out. It is the de-facto standard for Java Unit Testing.
			</para>
		</section>
		<section xml:id="TestingRed5RunningTests">
			<title>Running Tests</title>
			<para> To run tests, checkout the latest server build, and run the following ant command:</para>
			<literallayout> 
ant run-tests
</literallayout>
			<para>To see the results, you can open the doc/test/index.html file once the tests are finished.</para>
			<literallayout> 
firefox doc/test/index.html
</literallayout>
		</section>
		<section xml:id="TestingRed5CreatingNewTests">
			<title>Creating New Tests</title>
			<para>Writing unit tests in the 
				<link xl:href="http://junit.org">JUnit</link> framework is beyond the scope of this document, but you can find help at the JUnit site. The Red5 unit test framework support JUnit 4.0, but can run JUnit 3.x-style tests as well.
				To create a new unit test, just create a new JUnitclass source file to the right path under test, and end the source filename with the string "Test.java". For example, to test org.red5.server.api.ANewClass, you would create the following java file under the "test" directory:
			</para>
			<literallayout> 
test/org/red5/server/api/ANewClassTest.java
</literallayout>
			<para>Once you do that, the compile process should pick up your new file and run the tests automatically.&amp;nbsp;</para>
			<para>By default, the run-tests runs all unit tests in the following directory:</para>
			<literallayout> 
bin/testcases/testreports
</literallayout>
		</section>
		<section xml:id="TestingRed5Runningunittestsfromeclipse">
			<title>Running unit tests from eclipse</title>
			<para>In theory every should work, but you may need to set the directory eclipse runs the test from.  Make sure it is set to:</para>
			<literallayout> 
bin/testcases/testreports
</literallayout>
		</section>
		<section xml:id="TestingRed5GuidelinesforNewUnitTests">
			<title>Guidelines for New Unit Tests</title>
			<para>Unit tests help make the code base stronger, but that said we do need to make sure that unit tests meet certain guidelines so we can have a useful build process. Those guidelines are:</para>
			<itemizedlist>
				<listitem>
					<para>Unit Tests MUST be self-contained (i.e. each test should run independently).</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>Unit Tests MUST not require a Red5 server to be running.</para>
				</listitem>
				<listitem>
					<para>Unit Tests MAY assume that no Red5 instance is currently running while they run (and so may fire up Red5 objects that bind to ports if appropriate).</para>
				</listitem>
				<listitem>
					<para>Unit Tests MUST NOT require thread-timing specific to your machine to run (or fail) consistently.</para>
				</listitem>
				<listitem>
					<para>Unit Tests MUST run successfully 100% in order to be checked in. That means, no checking in tests that fail with "not implemented".</para>
				</listitem>
				<listitem>
					<para>Unit Tests SHOULD try to avoid introducing new dependencies, but if you must use one (for example 
						<link xl:href="http://multithreadedtc.googlecode.com/">http://multithreadedtc.googlecode.com/</link> can be useful), identify it when you submit a JUnit test case and we'll review whether or not to add to the ivy test dependencies.
					</para>
				</listitem>
				<listitem>
					<para>Unit Tests MUST document what they do, and how to tell if they really worked, in JavaDoc comments above each test method.</para>
				</listitem>
				<listitem>
					<para>Unit Tests SHOULD be written using JUnit 4.x annotations</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="TestingRed5SubmittingNewUnitTests">
			<title>Submitting New Unit Tests</title>
			<para>We really want new Unit Tests, so if you have a Unit Test that meets the above guidelines we'd love to consider it. To submit it, do the following:</para>
			<itemizedlist>
				<listitem>
					<para>Review the guidelines above. Really.</para>
				</listitem>
				<listitem>
					<para>If you're fixing a bug:</para>
				</listitem>
			</itemizedlist>
			<para> ** Create a unit test and make sure it fails 100% of the time before you fix the bug.
				 ** Fix the bug.
				 ** Ensure that unit test succeeds 100% of the time after you fix the bug.</para>
			<itemizedlist>
				<listitem>
					<para>If you're testing a new feature:</para>
				</listitem>
			</itemizedlist>
			<para> ** Write your new feature.
				 ** Create a unit test and make it it succeeds 100% of the time with the new feature.</para>
			<itemizedlist>
				<listitem>
					<para>Create a diff file with your patch using "svn diff" from tip of tree.</para>
				</listitem>
				<listitem>
					<para>File a new issue in 
						<link xl:href="http://jira.red5.org/browse/DT">Jira</link> in the "Developer Tools" section.&amp;nbsp; Please attach the diff files and the contents of any new files, and specify the following:
					</para>
				</listitem>
			</itemizedlist>
			<para> ** What the test tests
				 ** Brief overview of how it works</para>
			<itemizedlist>
				<listitem>
					<para>Someone (probably Art) will review it and get back to you on changes that may be needed, or will commit it.</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="TestingRed5SuggestingNewUnitTests">
			<title>Suggesting New Unit Tests</title>
			<para>We really do want new unit tests, and would love suggestions. But bear in mind that Red5 is a 100% volunteer project and most people who work on it have full time day jobs (their time spent on red5 is a labor of love). So don't be hurt if your suggestion for a test is not picked up on.</para>
			<para>That said, a great way to suggest an area to test is to go ahead and write the system test yourself\! Send it to the list, and it'll probably get a warm reception.</para>
		</section>
	</section>
	<section xml:id="TestingRed5IntegrationTesting">
		<title>Integration Testing</title>
		<para>We currently don't have a 
			<link xl:href="http://en.wikipedia.org/wiki/Integration_testing">integration testing framework</link>, but when I next return to this area, I'll try adding one. The basic idea for this (which I love) is to make a framework based on the RTMPClient.
		</para>
		<section xml:id="TestingRed5Purpose2">
			<title>Purpose</title>
			<para>The purpose of integration testing is to start to plug together different simpler modules (that hopefully have been unit tested) to see if they play nice together. See this Integration Testing Wikipedia Pagefor an overview of the concepts.</para>
		</section>
	</section>
	<section xml:id="TestingRed5SystemTesting">
		<title>System Testing</title>
		<section xml:id="TestingRed5Purpose3">
			<title>Purpose</title>
			<para>When all is set and done, and you've Unit tested everything, and did integration testing by mixing together different components, you're still not done. At some point, a user is going to pick up your application, and start using it. And if you haven't tested from that end to your code and back, well chances are something will break.</para>
			<para>That's where 
				<link xl:href="http://en.wikipedia.org/wiki/Functional_testing">System Testing</link> comes in. In the System Test we try to do some basic end-to-end tests to see if our code performs as expected from the end-user's perspective.
			</para>
		</section>
	</section>
	<section xml:id="TestingRed5Technology2">
		<title>Technology</title>
		<para>For Flash system testing (a.k.a selftest), we use the 
			<link xl:href="http://junit.org/">ASUnit|http://asunit.org/</link> framework, which is very similar to 
			<link xl:href="JUnit">JUnit</link>. You can find the current Flash self test here.
		</para>
		<para>We also use 
			<link xl:href="http://theyard.googlecode.com/">The Yard Flash Libraries</link> to abstract away some components of Flash connecting and stream playing, but you're not required to use those libraries if you submit new flash unit tests.
		</para>
	</section>
	<section xml:id="TestingRed5RunningTests2">
		<title>Running Tests</title>
		<para>The Red5 system tests require a special test server to be running. This is just a mostly empty red5 server with one special application installed:</para>
		<literallayout> 
http://localhost/selftest
</literallayout>
		<para>That selftest Red5 application has the following service exposed under the name "echo":</para>
		<literallayout> 
red5.server.services.IEchoService.java:
[http://code.google.com/p/red5/source/browse/java/server/trunk/test/org/red5/server/service/IEchoService.java]
</literallayout>
		<para>Every method on that Java Interface is callable from Flash by using the prefix "echo.".&amp;nbsp; For example, "echo.echoNumber" will call the echoNumber method over RTMP/AMF.&amp;nbsp;</para>
		<para>There are two ways to run the system test:</para>
		<para>
			<emphasis role="bold">Attended</emphasis> -  Run a Test Server 
		</para>
		<literallayout> 
ant run-tests-server
</literallayout>
		<para>Start up the Flash Self Test application</para>
		<literallayout> 
flashplayer tests/fixtures/red5-selftest.swf
</literallayout>
		<para> </para>
		<para>This method assumes someone is watching the test. </para>
		<para>
			<emphasis role="bold">Unattended</emphasis> - 
		</para>
		<literallayout> 
ant run-tests-systemtest
</literallayout>
		<para>This only works on Linux. 
			It starts up a red5 server, runs the system test in the background, and then collects all log artifacts in the directory "output" relative to the current directory. 
			It will also take snapshop pictures of the desktop as running if ImageMagick's import tool is installed. ||</para>
		<para>System tests run the server with RED5_HOME set to bin/testcases/testreports/dist, and runs the flash clients from the directory bin/testcases/testreports/fixtures.</para>
		<para>Lastly, you should ensure red5 is not currently running on the server you run a system test on. However, because the system tests use their own version of Red5, you don't need to worry about them clobbering anything in your own Red5 installation.</para>
		<para>The System Tests use a series of scripts located in:</para>
		<literallayout> 
test/scripts
</literallayout>
		<para>to automatically start-up and shutdown red5, as well as find the necessary flash logs from different parts of the system. The main one of interest is:</para>
		<literallayout> 
test/scripts/red5-flash-player-headless
</literallayout>
		<para>It assumes it's running under a Windowing system (e.g. XWindows) with a Bourne Shell, and then starts a clean red5 server, runs the Flash system tests, and cleans up afterwards.</para>
	</section>
	<section xml:id="TestingRed5CreatingNewTests2">
		<title>Creating New Tests</title>
		<para>Writing unit tests in theAsUnit framework is beyond the scope of this document, but you can find help at the AsUnit site.</para>
		<para>But to create a new system test, you can start with the Flash selftest application:svn checkout 
			<link xl:href="http://red5.googlecode.com/svn/flash/trunk/selftest">http://red5.googlecode.com/svn/flash/trunk/selftest</link> red5_selftestTo create a new AsUnit test just create a newclass source file to the right path under test, and end the source filename with the string "Test.as". For example:
		</para>
		<literallayout> 
test/org/red5/server/decodingComplexObjectOverAMFTest3.as
</literallayout>
		<para>Once you do that, you'll need to modify the AllTests.as file in the directory to add your new test.</para>
		<para>We use 
			<link xl:href="http://ofb.net/~aclarke/theyard/flashutils-0.1.0/api/">The Yard flash libraries|http://code.google.com/p/theyard/</link> to abstract away some of the complexities of connecting to and manipulating NetConnection and NetStream objects. See the 
			<link xl:href="The">Yard flash library documentation</link>. You don't have to use them for new tests, but they can make things a lot easier (for example, by taking care of connecting for you).
		</para>
		<para>To see documentation of existing tests, run:</para>
		<literallayout> 
ant doc
</literallayout>
	</section>
	<section xml:id="TestingRed5ASampleSystemTest">
		<title>A Sample System Test</title>
		<para>Here's a very straightforward System Test submitted by trebor (at) vlideshow.com.</para>
		<para>This test connects to the test server and calls the "echo.echoString" method to pass a String to Red5, and then make sure we get the same array back.&amp;nbsp; It tests both AMF0 and AMF3 using the same code path because they should be the same.</para>
		<literallayout> 
EchoStringTest.as: AMF0 and AMF3 Strings sent over RTMP Test
[http://code.google.com/p/red5/source/browse/flash/trunk/selftest/test/src/org/red5/server/io/EchoStringTest.as]
</literallayout>
	</section>
	<section xml:id="TestingRed5GuidelinesforNewSystemTests">
		<title>Guidelines for New System Tests</title>
		<para>Unfortunately Flash ActionScript is not as forgiving as Java is about cleaning up after a test is finished, so the guidelines for writing System Tests are somewhat more involved.&amp;nbsp; Also, these tests MUST be runnable in a "unattended" mode \-\- meaning requiring no human interaction, to the bar is higher.</para>
		<itemizedlist>
			<listitem>
				<para>System Tests MUST not require any human interaction \-\- i.e. if a human can't give permission for something, it should fail without blocking.</para>
			</listitem>
			<listitem>
				<para>System Tests MAY draw on the flash screen but MUST remove any artifacts when done</para>
			</listitem>
			<listitem>
				<para>System Tests MUST be self-contained (i.e. each test should run independently).</para>
			</listitem>
			<listitem>
				<para>System Tests MAY assume that a Red5 instance is running on localhost, on port 1935, and that the selftest application is available.</para>
			</listitem>
			<listitem>
				<para>System Tests MAY assume that the selftest application has the Echo service installed.</para>
			</listitem>
			<listitem>
				<para>System Tests MUST clean up fully after themselves. That is, they must disconnect and remove any event handlers..</para>
			</listitem>
			<listitem>
				<para>System Tests MUST run successfully 100% in order to be checked in. That means, no checking in tests that fail with "not implemented".</para>
			</listitem>
			<listitem>
				<para>System Tests SHOULD try to avoid introducing new dependencies, but if you must use one (for example 
					<link xl:href="http://theyard.googlecode.com/">http://theyard.googlecode.com/</link> can be useful), identify it when you submit a test case and we'll review whether or not to add to the ivy test dependencies.
				</para>
			</listitem>
			<listitem>
				<para>System Tests MUST document what they do, and how to tell if they really worked, in AsDoc comments above each test method.</para>
			</listitem>
		</itemizedlist>
	</section>
	<section xml:id="TestingRed5SubmittingNewSystemTests">
		<title>Submitting New System Tests</title>
		<para>We really want new System Tests, so if you have a System Test that meets the above guidelines we'd love to consider it. To submit it, do the following:</para>
		<itemizedlist>
			<listitem>
				<para>Review the guidelines above. Really.</para>
			</listitem>
			<listitem>
				<para>If you're fixing a bug:</para>
			</listitem>
		</itemizedlist>
		<para> ** Create a system test and make sure it fails 100% of the time before you fix the bug.
			 ** Fix the bug, and run a new test server.
			 ** Ensure that unit test succeeds 100% of the time after you fix the bug.</para>
		<itemizedlist>
			<listitem>
				<para>If you're testing a new feature:</para>
			</listitem>
		</itemizedlist>
		<para> ** Write your new feature.
			 ** Create a unit test and make it it succeeds 100% of the time with the new feature.</para>
		<itemizedlist>
			<listitem>
				<para>Create a diff file with your patch using "svn diff" from tip of tree.</para>
			</listitem>
			<listitem>
				<para>File a new issue in 
					<link xl:href="http://jira.red5.org/browse/DT">Jira</link> in the "Developer Tools" section.&amp;nbsp; Please attach the diff files and the contents of any new files, and specify the following:
				</para>
			</listitem>
		</itemizedlist>
		<para> ** What the test tests
			 ** Brief overview of how it works</para>
		<itemizedlist>
			<listitem>
				<para>Someone (probably Art) will review it and get back to you on changes that may be needed, or will commit it.</para>
			</listitem>
		</itemizedlist>
		<para>If your change is accepted, we'll integrate it into the Flash self-test, and update the Java Server trunk to use the new Flash selftest as our system test.</para>
	</section>
	<section xml:id="TestingRed5SuggestingNewSystemTests">
		<title>Suggesting New System Tests</title>
		<para>We really do want new tests, and would love suggestions. But bear in mind that Red5 is a 100% volunteer project and most people who work on it have full time day jobs (their time spent on red5 is a labor of love). So don't be hurt if your suggestion for a test is not picked up on.</para>
		<para>That said, a great way to suggest an area to test is to go ahead and write the system test yourself\! Send it to the list, and it'll probably get a warm reception.</para>
	</section>
	<section xml:id="TestingRed5ContinuousIntegration">
		<title>Continuous Integration</title>
		<section xml:id="TestingRed5Overview2">
			<title>Overview</title>
			<para>The last step of our testing framework is to run a continuous build. See this Wikipedia Pagefor some of the principles involved.</para>
			<para>The basic idea is to do a checkout, run all unit, functional and system tests, and then notify the person who checked in, and any others that are interested, about the current state of the build. The idea is that it is easier to fix bugs when they are introduced, than if they are found days or weeks later.</para>
		</section>
		<section xml:id="TestingRed5Technology3">
			<title>Technology</title>
			<para>We use Hudson as our continuous build server running inside a Tomcat instance (running as the Hudson, not root, user) that is forwarded to by Apache2. This currently runs on an Amazon EC2 small instance hosted at:</para>
			<literallayout> 
[http://build.theyard.net/]
</literallayout>
			<para>E-Mail notification of bad builds are sent to the last person who checked in, and to the red5-builds (at) googlecode.com group.</para>
			<para>We run the following builds continuously:</para>
			<itemizedlist>
				<listitem>
					<para>We build the java/server/trunk against JDK 1.6 on Linux i386 (Ubuntu) and run all units tests</para>
				</listitem>
				<listitem>
					<para>If this is successful, we run all system tests under JDK 1.6 on Linux i386 (Ubuntu) .</para>
				</listitem>
				<listitem>
					<para>We build the java/server/trunk against JDK 1.5 on Linux i386 (Ubuntu) and run all unit tests.</para>
				</listitem>
				<listitem>
					<para>If this is successful, we run all system tests under JDK 1.5 on Linux i386 (Ubuntu) .</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="TestingRed5HowToRunTheContinuousBuild">
			<title>How To Run The Continuous Build</title>
			<para>The Continuous Build server will run any time you check something into the Java Server.  It also runs once every night.</para>
			<para>If you're on the Red5 dev team and want to set up new job, or log-in to hudson directly, talk to Art Clarke and he'll hook you up.</para>
		</section>
		<section xml:id="TestingRed5HowtoSubmitNewJobsforContinuousBuilding">
			<title>How to Submit New Jobs for Continuous Building</title>
			<para>For now, send a request to red5devs@osflash.org and we'll evaluate it.</para>
		</section>
	</section>
	<section xml:id="TestingRed5HowyoucanhelpwithContinuousBuilding">
		<title>How you can help with Continuous Building</title>
		<para>If you're willing do donate a i386 Amazon EC2 instance or an i86_64 Amazon EC2 instance, we're in need of both to do testing on. The current set up is temporary.</para>
		<section xml:id="TestingRed5HowtoSetupaContinuousBuildServer">
			<title>How to Set up a Continuous Build Server</title>
			<para>NOTE: THIS SECTION IS MEANT FOR SERIOUSLY ADVANCED RED5 USERS. 99.999999% of people shouldn't even read this.</para>
			<para>Glad you asked. We used an Amazon EC2 instance to get us started. Specifically this AMI from Eric Hammon at alestic.com.</para>
			<para>We then created a script that makes that image into one that can run Red5's continuous build server. See:</para>
			<literallayout> 
http://red5.googlecode.com/svn/build/remote/trunk/ec2/
</literallayout>
			<para>To set up an AWS EC2 instance to build and auto-test red5, do the following:</para>
			<orderedlist>
				<listitem>
					<para>Learn how to use Amazon EC2.</para>
				</listitem>
				<listitem>
					<para>Start up an instance of Ubuntu 8.04 LTS Hardy: ami-1cd73375</para>
				</listitem>
				<listitem>
					<para>Check out the Red5 remote build branch:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
 svn checkout http://red5.googlecode.com/build/remote/trunk/
</literallayout>
			<orderedlist>
				<listitem>
					<para>Copy the ec2/ec2-explode directory to your new Amazon EC2 instance:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
cd ec2/ec2-explode
./ec2-implode ../ec2.tgz
scp -i YOUR_AWS_KEYPAIR root@YOUR_AWS_PUBLIC_IP:/tmp
</literallayout>
			<orderedlist>
				<listitem>
					<para>Log into your AWS EC2 instance:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
ssh -i YOUR_AWS_KEYPAIR -l root YOUR_AWS_PUBLIC_IP
</literallayout>
			<orderedlist>
				<listitem>
					<para>Prepare your ec2-explode package:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
cd tmp
  tar xzvf ec2.tgz
</literallayout>
			<orderedlist>
				<listitem>
					<para>Run the ec2-explode script:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
./ec2-explode
</literallayout>
			<para> You will have to accept the Sun JDK license, choose a password for your XAuthority file (don't worry \-\- the X ports aren't opened, you just need that to run a headless X Server to make the Flash System Tests run), and enter the data necessary to send mail from your machine.</para>
			<orderedlist>
				<listitem>
					<para>You'll need to patch up your Apache 2 files to reflect your domain name:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
rename /etc/apache2/sites-enabled/build.theyard.net /etc/apache2/sites-enabled/YOUR-APACHE-SITE
vi /etc/apache2/sites-enabled/YOUR-APACHE-SITE
service apache2 restart
</literallayout>
			<orderedlist>
				<listitem>
					<para>Go to your website and make sure hudson is running:</para>
				</listitem>
			</orderedlist>
			<literallayout> 
http://YOUR-AWS-PUBLIC-IP/
</literallayout>
			<para>It's probably a good idea to change the default "hudson" password as well.  It defaults to:
				 10.</para>
			<literallayout> 
fmskiller
</literallayout>
			<para>This is the password for the Hudson UI, not the password on the hudson linux account. By default the linux hudson account doesn't allow log in using passwords.</para>
		</section>
	</section>
</chapter>