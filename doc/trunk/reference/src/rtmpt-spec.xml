<?xml version="1.0" encoding="utf-8"?>
<appendix xml:id="rtmpt" xmlns="http://docbook.org/ns/docbook" 
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
	<title>RTMPT Specification</title>
	<section xml:id="rtmpt-spec-overview">
		<title>Overview</title>
		<para>This document describes the RTMPT tunneling protocol as implemented by the
			Red5 Open Source Flash Server. Please note that this document is _not_ an
			official specification by Macromedia but hopefully helps other people to
			write software that makes use of RTMPT.</para>
		<para>RTMPT basically is a HTTP wrapper around the RTMP protocol that is sent using
			POST requests from the client to the server. Because of the non-persistent
			nature of HTTP connections, RTMPT requires the clients to poll for updates
			periodically in order to get notified about events that are generated by the
			server or other clients.</para>
		<para>During the lifetime of a RTMPT session, four possible request types can be
			sent to the server which will be described below.</para>
	</section>
	<section xml:id="rtmpt-spec-urls">
		<title>URLs</title>
		<para>The URL to be opened has the following form:</para>
		<programlisting>http://server/&lt;comand&gt;/[&lt;client&gt;/]&lt;index&gt;</programlisting>
		<variablelist role="definition_list">
			<varlistentry>
				<term>
					<citetitle>&lt;command&gt;</citetitle>
				</term>
				<listitem>
					<para>denotes the RTMPT request type (see below)</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>
					<citetitle>&lt;client&gt;</citetitle>
				</term>
				<listitem>
					<para>specifies the id of the client that performs the requests (only sent for
						established sessions)</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>
					<citetitle>&lt;index&gt;</citetitle>
				</term>
				<listitem>
					<para>is a consecutive number that seems to be used to detect missing packages</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section xml:id="rtmpt-spec-request-response">
		<title>Request / Response</title>
		<para>All HTTP requests share some common properties:</para>
		<blockquote>
			<itemizedlist mark="-">
				<listitem>
					<para>They use HTTP 1.1 POST.</para>
				</listitem>
				<listitem>
					<para>The content type is <citetitle>application/x-fcs</citetitle>.</para>
				</listitem>
				<listitem>
					<para>The connection should be kept alive by the client and server to reduce
						network overhead.</para>
				</listitem>
			</itemizedlist>
		</blockquote>
		<para>The HTTP responses also share some properties:</para>
		<blockquote>
			<itemizedlist mark="-">
				<listitem>
					<para>The content type is <citetitle>application/x-fcs</citetitle>.</para>
				</listitem>
				<listitem>
					<para>For all established sessions the first byte of the response data controls
						the polling interval of the client where higher values mean less polling
						requests.</para>
				</listitem>
			</itemizedlist>
		</blockquote>
	</section>
	<section xml:id="rtmpt-spec-polling-interval">
		<title>Polling interval</title>
		<para>The server always starts with a value of 0x01 after data was returned and
			increases it after 10 emtpy replies. The maximum delay is 0x21 which causes
			a delay of approximately 0.5 seconds between two requests.</para>
		<para>Red5 currently increases the delay in the following steps:
			0x01, 0x03, 0x05, 0x09, 0x11, 0x21.</para>
	</section>
	<section xml:id="rtmpt-spec-initial-connect-command-open">
		<title>Initial connect (command "open")</title>
		<para>This is the first request that is sent to the server in order to register a
			client on the server and start a new session. The server replies with a unique
			id (usually a number) that is used by the client for all future requests.</para>
		<para>Note: the reply doesn't contain a value for the polling interval!
			A successful connect resets the consecutive index that is used in the URLs.</para>
	</section>
	<section xml:id="rtmpt-spec-client-updates-command-send">
		<title>Client updates (command "send")</title>
		<para>The data a client would send to the server using RTMP is simply prefixed with
			a HTTP header and otherwise sent unmodified.</para>
		<para>The server responds with a HTTP response containing one byte controlling the
			polling interval and the RTMP data if available.</para>
	</section>
	<section xml:id="rtmpt-spec-polling-requests-command-idle">
		<title>Polling requests (command "idle")</title>
		<para>If the client doesn't have more data to send to the server, he has to poll
			for updates to receive streaming data or events like shared objects.</para>
	</section>
	<section xml:id="rtmpt-spec-disconnect-of-a-session-command-close">
		<title>Disconnect of a session (command "close")</title>
		<para>If a client wants to terminate his connection, he sends the "close" command
			which is replied with a 0x00 by the server.</para>
	</section>
</appendix>