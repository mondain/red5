<?xml version='1.0' ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="MigrationGuide">
	<title>Migration Guide</title>
	<para>This document describes API differences between the Macromedia Flash Communication 
		Server / Adobe Flash Media Server and Red5. It aims at helping migrate existing 
		applications to Red5. </para>
	<para>If you don't have an application in Red5 yet, please read the tutorial about howto create 
		new applications first. </para>
	<section xml:id="MigrationGuideApplicationcallbacks">
		<title>Application callbacks</title>
		<para>When implementing serverside applications, one of the most important functionalities is to 
			get notified about clients that connect or disconnect and to be informed about the creation 
			of new instances of the application. </para>
		<section xml:id="MigrationGuideInterfaceIScopeHandler">
			<title>Interface IScopeHandler</title>
			<para>Red5 specifies these actions in the interface IScopeHandler 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IScopeHandler.html">http://dl.fancycode.com/red5/api/org/red5/server/api/IScopeHandler.html</link>. See the API documentation for further details.
			</para>
		</section>
		<section xml:id="MigrationGuideClassApplicationAdapter">
			<title>Class ApplicationAdapter</title>
			<para>As some methods may be called multiple times for one request (e.g. connect will be called 
				once for every scope in the tree the client connects to), the class ApplicationAdapter 

				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link> defines 
				additional methods. 
			</para>
			<para>This class usually is used as base class for new applications. </para>
			<para>Here is a short overview of methods of the FCS / FMS application class and their 
				corresponding methods of ApplicationAdapter 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link> in Red5:
			</para>
			<informaltable>
				<tr>
					<td>FCS / FMS </td>
					<td>Red5</td>
				</tr>
				<tr>
					<td>onAppStart </td>
					<td>appStart \\ roomStart</td>
				</tr>
				<tr>
					<td>onAppStop </td>
					<td>appStop \\ roomStop</td>
				</tr>
				<tr>
					<td>onConnect </td>
					<td>appConnect \\ roomConnect \\ appJoin \\ roomJoin </td>
				</tr>
				<tr>
					<td>onDisconnect </td>
					<td>appDisconnect \\ roomDisconnect \\ appLeave \\ roomLeave </td>
				</tr>
			</informaltable>
			<para>The app''' methods are called for the main application, the room''' methods are called for 
				rooms (i.e. instances) of the application. </para>
			<para>You can also also use the ApplicationAdapter 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link> to check for streams, shared objects, or subscribe 
				them. See the API documentation for further details. 
			</para>
			<section xml:id="MigrationGuideExecutionorderofconnectionmethods">
				<title>Execution order of connection methods</title>
				<para>Assuming you connect to rtmp://server/app/room1/room2 </para>
				<para>At first, the connection is established, so the user "connects" to all scopes that are 
					traversed up to room2: </para>
				<orderedlist>
					<listitem>
						<para>app (-> appConnect)</para>
					</listitem>
					<listitem>
						<para>room1 (-> roomConnect) </para>
					</listitem>
					<listitem>
						<para>room2 (-> roomConnect) </para>
					</listitem>
				</orderedlist>
				<para>After the connection is established, the client object is retrieved and if it's the first 
					connection by this client to the scope, he "joins" the scopes: </para>
				<orderedlist>
					<listitem>
						<para>app (-> appJoin)</para>
					</listitem>
					<listitem>
						<para>room1 (-> roomJoin)</para>
					</listitem>
					<listitem>
						<para>room2 (-> roomJoin)</para>
					</listitem>
				</orderedlist>
				<para>If the same client establishes a second connection to the same scope, only the connect 
					methods will be called. If you conect to partially the same scopes, only a few join methods 
					might be called, e.g. rtmp://server/app/room1/room3 will trigger </para>
				<orderedlist>
					<listitem>
						<para>appConnect("app") </para>
					</listitem>
					<listitem>
						<para>joinConnect("room1") </para>
					</listitem>
					<listitem>
						<para>joinConnect("room3") </para>
					</listitem>
					<listitem>
						<para>roomJoin("room3")</para>
					</listitem>
				</orderedlist>
				<para>The appStart method currently is only called once during startup of Red5 as it currently 
					can't unload/load applications like FCS/FMS does. The roomStart methods are called when 
					the first client connects to a room. </para>
			</section>
		</section>
		<section xml:id="MigrationGuideAcceptingrejectingclients">
			<title>Accepting / rejecting clients</title>
			<para>FCS / FMS provide the methods acceptConnection and rejectConnection to accept and 
				reject new clients. To allow clients to connect, no special action is required by Red5 
				applications, the *Connect methods just need to return true in this case. </para>
			<para>If a client should not be allowed to connect, the method rejectClient can be called which is 
				implemented by the ApplicationAdapter 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link> class. Any parameter passed to rejectClient is available 
				as the application property of the status object that is returned to the caller. 
			</para>
		</section>
	</section>
	<section xml:id="MigrationGuideCurrentconnectionandclient">
		<title>Current connection and client</title>
		<para>Red5 supports two different ways to access the current connection from an invoked 
			method. The connection can be used to get the active client and the scope he is connected 
			to. The first possibility uses the "magic" Red5 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/Red5.html">http://dl.fancycode.com/red5/api/org/red5/server/api/Red5.html</link> object: 
		</para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.api.IClient; 
import org.red5.server.api.IConnection; 
import org.red5.server.api.IScope; 
import org.red5.server.api.Red5; 
public void whoami() { 
    IConnection conn = Red5.getConnectionLocal(); 
    IClient client = conn.getClient(); 
    IScope scope = conn.getScope(); 
    // ... 
} 
]]>
</programlisting>
		<para>The second possiblity requires the method to be defined with an argument of type 
			IConnection 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IConnection.html">http://dl.fancycode.com/red5/api/org/red5/server/api/IConnection.html</link> as 
			implicit first parameter which is automatically added by Red5 when a client calls the 
			method: 
		</para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.api.IClient; 
import org.red5.server.api.IConnection; 
import org.red5.server.api.IScope; 
public void whoami(IConnection conn) { 
    IClient client = conn.getClient(); 
    IScope scope = conn.getScope(); 
    // ... 
} 
]]>
</programlisting>
	</section>
	<section xml:id="MigrationGuideAdditionalhandlers">
		<title>Additional handlers</title>
		<para>For many applications, existing classes containing application logic that is not related to 
			Red5 are required to be reused. In order to make them available for clients connecting 
			through RTMP, these classes need to be registered as handlers in Red5. </para>
		<para>There are currently two ways to register these handlers: </para>
		<orderedlist>
			<listitem>
				<para>By adding them to the configuration files.</para>
			</listitem>
			<listitem>
				<para>By registering them manually from the application code. </para>
			</listitem>
		</orderedlist>
		<para>The handlers can be executed by clients with code similar to this:</para>
		<literallayout>
nc = new NetConnection(); 
nc.connect("rtmp://localhost/myapp"); 
nc.call("handler.method", nc, "Hello world!"); 
</literallayout>
		<para>If a handler is requested, Red5 always looks it up in the custom scope handlers before 
			checking the handlers that have been set up in the context through the configuration file. </para>
		<section xml:id="MigrationGuideHandlersinconfigurationfiles">
			<title>Handlers in configuration files</title>
			<para>This method is best suited for handlers that are common to all scopes the application runs 
				in and that don't need to change during the lifetime of an application. </para>
			<para>To register the class com.fancycode.red5.HandlerSample as handler sample, the following 
				bean needs to be added to WEB-INF/red5-web.xml:</para>
			<programlisting language="xml">
<![CDATA[

<bean id="sample.service" 
   class="com.fancycode.red5.HandlerSample" 
   singleton="true" /> 
]]>
</programlisting>
			<para>Note that the id of the bean is constructed as the name of the handler (here sample) and 
				the keyword service. </para>
		</section>
		<section xml:id="MigrationGuideHandlersfromapplicationcode">
			<title>Handlers from application code</title>
			<para>All applications that use handlers which are different for the various scopes or want to 
				change handlers, need a way to register them from the serverside code. These handlers 
				always override the handlers configured in red5-web.xml. The methods required for 
				registration are described in the interface IServiceHandlerProvider 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceHandlerProvider.html">http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceHandlerProvider.html</link> which is implemented 
				by ApplicationAdapter 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link>. 
			</para>
			<para>The same class as above can be registered using this code: </para>
			<programlisting language="java">
<![CDATA[

public boolean appStart(IScope app) { 
    if (!super.appStart(scope)) 
        return false; 
    Object handler = new com.fancycode.red5.HandlerSample(); 
    app.registerServiceHandler("sample", handler); 
    return true; 
} 
]]>
</programlisting>
			<para>Note that in this example, only the application scope has the sample handler but not the 
				subscopes! If the handler should be available in the rooms as well, it must be registered in 
				roomStart for the room scopes.</para>
		</section>
	</section>
	<section xml:id="MigrationGuideCallstoclientmethods">
		<title>Calls to client methods</title>
		<para>To call methods from your Red5 application on the client, you will first need a reference to 
			the current connection object: </para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.api.IConnection; 
import org.red5.server.api.Red5; 
import org.red5.server.api.service.IServiceCapableConnection; 
... 
IConnection conn = Red5.getConnectionLocal(); 
]]>
</programlisting>
		<para>If the connection implements the IServiceCapableConnection 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceCapableConnection.html">http://dl.fancycode.com/red5/api/org/red5/server/api/service/IServiceCapableConnection.html</link> interface, it supports 
			calling methods on the other end: 
		</para>
		<programlisting language="java">
<![CDATA[

if (conn instanceof IServiceCapableConnection) { 
    IServiceCapableConnection sc = (IServiceCapableConnection) conn; 
    sc.invoke("the_method", new Object[]{"One", 1}); 
} 
]]>
</programlisting>
		<para>If you need the result of the method call, you must provide a class that implements the 
			IPendingServiceCallback 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/service/IPendingServiceCallback.html">http://dl.fancycode.com/red5/api/org/red5/server/api/service/IPendingServiceCallback.html</link> interface: 
		</para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.api.service.IPendingService; 
import org.red5.server.api.service.IPendingServiceCallback; 
class MyCallback implements IPendingServiceCallback { 
    public void resultReceived(IPendingServiceCall call) { 
        // Do something with "call.getResult()" 
    } 
} 
]]>
</programlisting>
		<para>The method call looks now like this: </para>
		<programlisting language="java">
<![CDATA[

if (conn instanceof IServiceCapableConnection) { 
    IServiceCapableConnection sc = (IServiceCapableConnection) conn; 
    sc.invoke("the_method", new Object[]{"One", 1}, new MyCallback()); 
} 
]]>
</programlisting>
		<para>Of course you can implement this interface in your application and pass a reference to the 
			application instance.</para>
	</section>
	<section xml:id="MigrationGuideSharedObjects">
		<title>SharedObjects</title>
		<para>The methods to access shared objects from an application are specified in the interface 
			ISharedObjectService 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectService.html">http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectService.html</link>. 
		</para>
		<para>When dealing with shared objects in serverside scripts, special care must be taken about 
			the scope they are created in. </para>
		<para>To create a new shared object when a room is created, you can override the method 
			roomStart in your application: </para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.adapter.ApplicationAdapter; 
import org.red5.server.api.IScope; 
import org.red5.server.api.so.ISharedObject; 
public class SampleApplication extends ApplicationAdapter { 
  public boolean roomStart(IScope room) { 
      if (!super.roomStart(room)) 
          return false; 
      createSharedObject(room, "sampleSO", true); 
      ISharedObject so = getSharedObject(room, "sampleSO"); 
      // Now you could do something with the shared object... 
      return true; 
  } 
} 
]]>
</programlisting>
		<para>Now everytime a first user connects to a room of a application, e.g. through rtmp://server/application/room1, a shared object sampleSO is created by the server. </para>
		<para>If a shared object should be created for connections to the main application, e.g. rtmp://server/application, the same must be done in the method appStart. </para>
		<para>For further informations about the possible methods a shared object provides please refer 
			to the api documentation of the interface ISharedObject 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObject.html">http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObject.html</link>. 
		</para>
		<section xml:id="MigrationGuideServersidechangelisteners">
			<title>Serverside change listeners</title>
			<para>To get notified about changes of the shared object similar to onSync in FCS / FMS, a 
				listener must implement the interface ISharedObjectListener 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectListener.html">http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectListener.html</link>: 
			</para>
			<programlisting language="java">
<![CDATA[

import org.red5.server.api.so.ISharedObject; 
import org.red5.server.api.so.ISharedObjectListener; 
public class SampleSharedObjectListener
Migration Guide 
       implements ISharedObjectListener { 
  public void onSharedObjectUpdate(ISharedObject so, 
                                   String key, Object value) { 
      // The attribute &lt;key&gt; of the shared object &lt;so&gt; 
      // was changed to &lt;value&gt;. 
  } 
  public void onSharedObjectDelete(ISharedObject so, String key) { 
      // The attribute &lt;key&gt; of the shared object &lt;so&gt; was deleted. 
  } 
  public void onSharedObjectSend(ISharedObject so, 
                                 String method, List params) { 
      // The handler &lt;method&gt; of the shared object &lt;so&gt; was called 
      // with the parameters &lt;params&gt;. 
  } 
  // Other methods as described in the interface... 
} 
]]>
</programlisting>
			<para>Additionally, the listener must get registered at the shared object: </para>
			<programlisting language="java">
<![CDATA[

ISharedObject so = getSharedObject(scope, "sampleSO"); 
so.addSharedObjectListener(new SampleSharedObjectListener()) 
]]>
</programlisting>
		</section>
		<section xml:id="MigrationGuideChangingfromapplicationcode">
			<title>Changing from application code</title>
			<para>A shared object can be changed by the server as well: </para>
			<programlisting language="java">
<![CDATA[

ISharedObject so = getSharedObject(scope, "sampleSO"); 
so.setAttribute("fullname", "Sample user"); 
]]>
</programlisting>
			<para>Here all subscribed clients as well as the registered handlers are notified about the new / 
				changed attribute. </para>
			<para>If multiple actions on a shared object should be combined in one update event to the 
				subscribed clients, the methods beginUpdate and endUpdate must be used: </para>
			<programlisting language="java">
<![CDATA[

ISharedObject so = getSharedObject(scope, "sampleSO"); 
so.beginUpdate(); 
so.setAttribute("One", "1"); 
so.setAttribute("Two", "2"); 
so.removeAttribute("Three"); 
so.endUpdate(); 
]]>
</programlisting>
			<para>The serverside listeners will receive their update notifications through separate method 
				calls as without the beginUpdate and endUpdate.</para>
			<para>Calls to shared object handlers through remote_so.send(&lt;handler>, &lt;args>) from a Flash 
				client or the corresponding serverside call can be mapped to methods in Red5. Therefore a 
				handler must get registered through a method of the ISharedObjectHandlerProvider 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectHandlerProvider.html">http://dl.fancycode.com/red5/api/org/red5/server/api/so/ISharedObjectHandlerProvider.html</link> 
				interface similar to the application handlers: 
			</para>
			<programlisting language="java">
<![CDATA[

package com.fancycode.red5; 
class MySharedObjectHandler { 
    public void myMethod(String arg1) { 
        // Now do something 
    } 
} 
... 
ISharedObject so = getSharedObject(scope, "sampleSO"); 
so.registerServiceHandler(new MySharedObjectHandler()); 
]]>
</programlisting>
			<para>Handlers with a given name can be registered as well: </para>
			<programlisting language="java">
<![CDATA[

ISharedObject so = getSharedObject(scope, "sampleSO"); 
so.registerServiceHandler("one.two", new MySharedObjectHandler()); 
]]>
</programlisting>
			<para>Here, the method could be called through one.two.myMethod. 
				Another way to define event handlers for SharedObjects is to add them to the red5- 
				web.xml similar to the file-based application handlers. The beans must have a name of 
				&lt;SharedObjectName>.&lt;DottedServiceName>.soservice, so the above example could also 
				be defined with: </para>
			<programlisting language="xml">
<![CDATA[

<bean id="sampleSO.one.two.soservice" 
   class="com.fancycode.red5.MySharedObjectHandler" 
   singleton="true" /> 
]]>
</programlisting>
		</section>
	</section>
	<section xml:id="MigrationGuidePersistence">
		<title>Persistence</title>
		<para>Persistence is used so properties of objects can be used even after the server has been 
			restarted. In FCS / FMS usually local shared objects on the serverside are used for this. </para>
		<para>Red5 allows arbitrary objects to be persistent, all they need to do is implement the 
			interface IPersistable 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/persistence/IPersistable.html">http://dl.fancycode.com/red5/api/org/red5/server/api/persistence/IPersistable.html</link>. Basically these objects have a type, a path, a name (all strings) and 
			know how to serialize and deserialize themselves.
		</para>
		<para>Here is a sample of serialization and deserialization: </para>
		<programlisting language="java">
<![CDATA[

import java.io.IOException; 
import org.red5.io.object.Input; 
import org.red5.io.object.Output; 
import org.red5.server.api.persistence.IPersistable; 
class MyPersistentObject implements IPersistable { 
  // Attribute that will be made persistent 
  private String data = "My persistent value"; 
  void serialize(Output output) throws IOException { 
      // Save the objects's data. 
      output.writeString(data); 
  } 
  void deserialize(Input input) throws IOException { 
      // Load the object's data. 
      data = input.readString(); 
  } 
  // Other methods as described in the interface... 
} 
]]>
</programlisting>
		<para>To save or load this object, the following code can be used: </para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.adapter.ApplicationAdapter; 
import org.red5.server.api.IScope; 
import org.red5.server.api.Red5; 
import org.red5.server.api.persistence.IPersistenceStore; 
class MyApplication extends ApplicationAdapter { 
  private void saveObject(MyPersistentObject object) { 
      // Get current scope. 
      IScope scope = Red5.getConnectionLocal().getScope(); 
      // Save object in current scope. 
      scope.getStore().save(object); 
  } 
  private void loadObject(MyPersistentObject object) { 
      // Get current scope. 
      IScope scope = Red5.getConnectionLocal().getScope(); 
      // Load object from current scope. 
      scope.getStore().load(object); 
  } 
} 
]]>
</programlisting>
		<para>If no custom objects are required for an application, but data must be stored for future 
			reuse, it can be added to the IScope 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IScope.html">http://dl.fancycode.com/red5/api/org/red5/server/api/IScope.html</link> through the interface IAttributeStore 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/IAttributeStore.html">http://dl.fancycode.com/red5/api/org/red5/server/api/IAttributeStore.html</link>. In scopes, all attributes that don't start with 
			IPersistable.TRANSIENT_PREFIX are persistent.
		</para>
		<para>The backend that is used to store objects is configurable. By default persistence in memory 
			and in the filesystem is available. </para>
		<para>When using filesystem persistence for every object a file is created in "webapps/&lt;app>/ 
			persistence/&lt;type>/&lt;path>/&lt;name>.red5", e.g. for a shared object "theSO" in the 
			connection to "rtmp://server/myApp/room1" a file at "webapps/myApp/persistence/ 
			SharedObject/room1/theSO.red5" would be created. </para>
	</section>
	<section xml:id="MigrationGuidePeriodicevents">
		<title>Periodic events</title>
		<para>Applications that need to perform tasks regularly can use the setInterval in FCS / FMS to 
			schedule methods for periodic execution. </para>
		<para>Red5 provides a scheduling service (ISchedulingService 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/ISchedulingService.html">http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/ISchedulingService.html</link>) that is implemented 
			by ApplicationAdapter 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html">http://dl.fancycode.com/red5/api/org/red5/server/adapter/ApplicationAdapter.html</link> like most other services. The service can register an object (which 
			needs to implement the IScheduledJob 
			<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/IScheduledJob.html">http://dl.fancycode.com/red5/api/org/red5/server/api/scheduling/IScheduledJob.html</link> interface) whose execute method is called in a given 
			interval. 
		</para>
		<para>To register an object, code like this can be used: </para>
		<programlisting language="java">
<![CDATA[

import org.red5.server.api.IScope; 
import org.red5.server.api.IScheduledJob; 
import org.red5.server.api.ISchedulingService; 
import org.red5.server.adapter.ApplicationAdapter; 
class MyJob implements IScheduledJob { 
  public void execute(ISchedulingService service) { 
      // Do something 
  } 
} 
public class SampleApplication extends ApplicationAdapter { 
  public boolean roomStart(IScope room) { 
      if (!super.roomStart(room)) 
          return false; 
      // Schedule invokation of job every 10 seconds. 
      String id = addScheduledJob(10000, new MyJob()); 
      room.setAttribute("MyJobId", id); 
      return true; 
  } 
} 
]]>
</programlisting>
		<para>The id that is returned by addScheduledJob can be used later to stop execution of the 
			registered job: </para>
		<programlisting language="java">
<![CDATA[

public void roomStop(IScope room) { 
    String id = (String) room.getAttribute("MyJobId");
    removeScheduledJob(id); 
    super.roomStop(room); 
} 
]]>
</programlisting>
	</section>
	<section xml:id="MigrationGuideRemoting">
		<title>Remoting</title>
		<para>Remoting can be used by non-rtmp clients to invoke methods in Red5. Another possibility 
			is to call methods from Red5 to other servers that provide a remoting service. </para>
		<section xml:id="MigrationGuideRemotingserver">
			<title>Remoting server</title>
			<para>Services that should be available for clients need to be registered the same way as 
				additional application handlers are registered. See above for details. </para>
			<para>To enable remoting support for an application, the following section must be added to the 
				WEB-INF/web.xml file: </para>
			<para>
				<emphasis role="bold">web.xml</emphasis> - 
			</para>
			<programlisting language="xml">
<![CDATA[

<servlet> 
   <servlet-name>gateway</servlet-name> 
   <servlet-class> 
      org.red5.server.net.servlet.AMFGatewayServlet 
   </servlet-class> 
</servlet> 
<servlet-mapping> 
   <servlet-name>gateway</servlet-name> 
   <url-pattern>/gateway/*</url-pattern> 
</servlet-mapping> 
]]>
</programlisting>
			<para>The path specified in the &lt;url-pattern> tag (here gateway) can be used by the remoting 
				client as connection url. If this example would have been specified for an application 
				myApp, the URL would be: </para>
			<literallayout>
http://localhost:5080/myApp/gateway 
</literallayout>
			<para>Methods invoked through this connection will be executed in the context of the application 
				scope. If the methods should be executed in subscopes, the path to the subscopes must be 
				added to the URL like: </para>
			<literallayout>
http://localhost:5080/myApp/gateway/room1/room2 
</literallayout>
		</section>
		<section xml:id="MigrationGuideRemotingclient">
			<title>Remoting client</title>
			<para>The class RemotingClient 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/RemotingClient.html">http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/RemotingClient.html</link> defines all methods that are required to call methods through the 
				remoting protocol. 
			</para>
			<para>The following code serves as example about how to use the remoting client:</para>
			<programlisting language="java">
<![CDATA[

import org.red5.server.net.remoting.RemotingClient; 
String url = "http://server/path/to/service"; 
RemotingClient client = new RemotingClient(url); 
Object[] args = new Object[]{"Hello world!"}; 
Object result = client.invokeMethod("service.remotingMethod", args); 
// Now do something with the result 
]]>
</programlisting>
			<para>By default, a timeout of 30 seconds will be used per call, this can be changed by passing a 
				second parameter to the constructor defining the maximum timeout in milliseconds. </para>
			<para>The remoting headers AppendToGatewayUrl, ReplaceGatewayUrl and 
				RequestPersistentHeader are handled automatically by the Red5 remoting client. </para>
			<para>Some methods may take a rather long time on the called server to complete, so it's better 
				to perform the call asynchronously to avoid blocking a thread in Red5. Therefore an object 
				that implements the interface IRemotingCallback 
				<link xl:href="http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/IRemotingCallback.html">http://dl.fancycode.com/red5/api/org/red5/server/net/remoting/IRemotingCallback.html</link> must be passed as additional parameter: 
			</para>
			<programlisting language="java">
<![CDATA[

import org.red5.server.net.remoting.RemotingClient; 
import org.red5.server.net.remoting.IRemotingCallback; 
public class CallbackHandler implements IRemotingCallback { 
  void errorReceived(RemotingClient client, String method, 
                     Object[] params, Throwable error) { 
      // An error occurred while performing the remoting call. 
  } 
  void resultReceived(RemotingClient client, String method, 
                      Object[] params, Object result) { 
      // The result was received from the server. 
  } 
} 
String url = "http://server/path/to/service"; 
RemotingClient client = new RemotingClient(url); 
Object[] args = new Object[]{"Hello world!"}; 
IRemotingCallback callback = new CallbackHandler(); 
client.invokeMethod("service.remotingMethod", args, callback); 
]]>
</programlisting>
		</section>
	</section>
	<section xml:id="MigrationGuideStreams">
		<title>Streams</title>
		<para>TODO: How can streams be accessed from an application?</para>
	</section>
</chapter>