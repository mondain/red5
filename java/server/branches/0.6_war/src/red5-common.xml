<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.0.xsd">

	<!-- This context is shared between all child contexts. -->

	<bean id="red5.server" class="org.red5.server.Server"  />

	<bean id="serializer" class="org.red5.io.object.Serializer" />
	
	<bean id="deserializer" class="org.red5.io.object.Deserializer" />

	<bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService" 
		autowire="byType" init-method="initialize" />
	
	<bean id="rtmpCodecFactory" class="org.red5.server.net.rtmp.codec.RTMPMinaCodecFactory" 
		autowire="byType" init-method="init" />
		
	<bean id="remotingCodecFactory" class="org.red5.server.net.remoting.codec.RemotingCodecFactory" 
		autowire="byType" init-method="init" />
	
	<bean id="videoCodecFactory" class="org.red5.server.stream.VideoCodecFactory">
		<property name="codecs">
			<list>
				<bean id="screenVideoCodec" class="org.red5.server.stream.codec.ScreenVideo"/>
				<!--
				<bean id="sorensonVideoCodec" class="org.red5.server.stream.codec.SorensonVideo"/>
				-->
			</list>
		</property>
	</bean>
    
	<bean id="streamableFileFactory" class="org.red5.io.StreamableFileFactory">
		<property name="services">
			<list>
				<bean id="flvFileService" class="org.red5.io.flv.impl.FLVService">
					<property name="generateMetadata" value="true" />
				</bean>
				<bean id="mp3FileService" class="org.red5.io.mp3.impl.MP3Service"/>
			</list>
		</property>
	</bean>
    
    <!-- handles creation / lookup of shared objects -->
    <bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
        <property name="persistenceClassName">
            <value>org.red5.server.persistence.FilePersistence</value>
        </property>
    </bean>
    
    <!-- high level access to streams -->
    <bean id="streamService" class="org.red5.server.stream.StreamService" />
    
    <bean id="providerService" class="org.red5.server.stream.ProviderService" />
    
    <bean id="consumerService" class="org.red5.server.stream.ConsumerService" />
    
    <bean id="FlowControlService" class="org.red5.server.stream.BalancedFlowControlService"
    	init-method="init" >
    	<property name="interval" value="10"/>
    	<property name="defaultCapacity" value="102400"/>
    </bean>
    
    <bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService" />
    
    <bean id="threadFactory" class="org.red5.server.pooling.ThreadObjectFactory" />

    <!-- threadpool settings for the remoting clients -->
    <bean id="remotingPool" class="org.red5.server.pooling.ThreadPool">
    	<constructor-arg><ref bean="threadFactory" /></constructor-arg> 
        <property name="maxIdle" value="8" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="8" />
        <property name="timeBetweenEvictionRunsMillis" value="120000" />
        <property name="minEvictableIdleTimeMillis" value="-1" />
        <property name="testOnBorrow" value="true" />
        <property name="whenExhaustedAction" value="2"/>    	
    </bean>
    
	<!-- 
	Now we can load the cache engine, only one may be enabled at a time. If no-caching is required select the
	NoCacheImpl. Three other implementations based on EhCache, WhirlyCache, and Red5Cache are also available.
	-->
	<bean id="object.cache" class="org.red5.server.cache.NoCacheImpl" />

</beans>
