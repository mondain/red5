<?xml version="1.0" ?>
<project name="Red5" basedir="." default="dist">
	
	<!-- This build file requires Apache Ant >= 1.7 -->
	<condition property="ant-at-least-7">
  		<antversion atleast="1.7.0"/>
	</condition>

	<!-- project properties -->
	<property environment="env"/>
	<property name="java.home" value="${env.JDK_HOME}"/>
	<property name="src.dir" value="src"/>
	<property name="dist.dir" value="dist"/>
	<property name="cluster.dir" value="cluster"/>
	<property name="origindist.dir" value="${cluster.dir}/origin"/>
	<property name="edgedist.dir" value="${cluster.dir}/edge"/>
	<property name="log.dir" value="log"/>
	<property name="lib.dir" value="lib"/>
	<property name="classes.dir" value="bin"/>
	<property name="webapps.dir" value="webapps"/>
	<property name="webapps.build.dir" value="${dist.dir}/webapps"/>
	<property name="debug.state" value="true"/>
	<property name="config.dir" value="conf"/>
	<property name="javadoc.dir" value="doc/api"/>

	<!-- base project properties -->
	<property file="build.properties"/>

	<!-- user overides for project properties -->
	<property file="${user.home}/build.properties"/>

	<!-- Special directory destination for build war - unused in normal server build -->
	<property name="tmp.war.dir" value=""/>

	<tstamp prefix="build">
		<format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
	</tstamp>

	<!-- JUNIT TESTING -->
	<property name="test.dir" value="test"/>
	<property name="testclass.dir" value="bin/testcases"/>
	<property name="testreports.dir" value="${testclass.dir}/testreports"/>
	<property name="testdoc.dir" value="doc/test"/>
	
	<path id="project.classpath">
		<fileset dir="${lib.dir}"/>
	</path>
	<path id="script.classpath">
		<fileset dir="${lib.dir}"/>
		<pathelement location="${classes.dir}"/>
	</path>
	<path id="full.classpath">
		<fileset dir="${lib.dir}"/>
		<fileset dir="./">
			<filename name="${red5.filename}.jar"/>
		</fileset>
	</path>
	<path id="runtime.classpath">
		<fileset dir="${lib.dir}">
			<exclude name="Grobo*.jar"/>
			<exclude name="grobo*.jar"/>
			<exclude name="junit*.jar"/>
			<exclude name="ivy*.jar"/>			
		</fileset>
	</path>

	<!-- Build Targets -->
	<target name="-java6.check">
		<condition property="java6.installed" value="true">
			<and>
				<equals arg1="${java.target_version}" arg2="1.6"/>
				<available property="java6.installed" classname="javax.script.Bindings"/>
			</and>
		</condition>
		<condition property="java6.using" value="1.6" else="${java.target_version}">
			<isset property="java6.installed"/>
		</condition>
		<echo message="Using Java ${java6.using}"/>
	</target>

	<target name="prepare" description="Setup the directories for building">
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${log.dir}"/>
		<mkdir dir="${cluster.dir}"/>
		<mkdir dir="${origindist.dir}"/>
		<mkdir dir="${edgedist.dir}"/>
		<mkdir dir="${testclass.dir}"/>
		<mkdir dir="${testreports.dir}"/>
	</target>

	<target name="clean" description="Clean the directories for building">
		<delete dir="${classes.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${cluster.dir}"/>
		<delete dir="${javadoc.dir}"/>
		<delete dir="${testdoc.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="${webapps.dir}/" includes="**/*.class"/>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${webapps.dir}/" includes="**/*.jar"/>
		</delete>
	</target>

	<target name="compile" depends="-java6.check, prepare" description="Compiles the server">
		<!-- token replacement filers -->
		<property name="filter.file" value="conf/build_standalone.properties"/>
		<condition property="java.target_version" value="1.5">
			<not>
				<isset property="java.target_version"/>
			</not>
		</condition>
		<echo message="javac version: ${java.target_version}"/>

		<condition property="eclipse.using" value="Using" else="Not using">
			<isset property="eclipse.running"/>
		</condition>
		<echo message="${eclipse.using} the Eclipse IDE"/>

		<condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
			<isset property="eclipse.running"/>
		</condition>
		<condition property="compiler" value="${build.compiler}${java.target_version}">
			<equals arg1="${build.compiler}" arg2="javac"/>
		</condition>
		<property name="compiler" value="${build.compiler}"/>
		<echo message="Compiler adapter name: ${compiler}"/>

		<!-- destination for compiled classes -->
		<property name="dest.dir" value="${classes.dir}"/>

		<!-- standard excludes for compile -->
		<property name="std_excludes" value="**/*.jsp,org/red5/server/script/**"/>
		<antcall target="compile_core" inheritAll="true" inheritRefs="true"/>
		<antcall target="compile_core_compatibility" inheritAll="true" inheritRefs="true"/>

		<!-- libraries and classes needed for building the demos -->
		<path id="webapps.classpath">
			<fileset dir="${lib.dir}">
				<filename name="*.jar"/>
			</fileset>
			<pathelement location="${classes.dir}"/>
		</path>
		<antcall target="compile_demos" inheritAll="true" inheritRefs="true"/>
		<antcall target="compile_script" inheritAll="true" inheritRefs="true"/>
	</target>

	<!-- Core -->
	<target name="compile_core" if="java6.installed" description="Build server core">
		<javac sourcepath="" srcdir="${src.dir}" destdir="${dest.dir}" classpathref="project.classpath"
			 optimize="${build.optimize}" verbose="${build.verbose}" fork="${build.fork}" nowarn="${build.nowarn}"
			 deprecation="${build.deprecation}" debug="${debug.state}" compiler="${compiler}"
			 source="${java.target_version}" target="${java.target_version}" memoryMaximumSize="${memory.maximum}"
			 excludes="${std_excludes}" listfiles="false"/>
	</target>

	<target name="compile_core_compatibility" unless="java6.installed">
		<javac sourcepath="" srcdir="${src.dir}" destdir="${dest.dir}" classpathref="project.classpath"
			 optimize="${build.optimize}" verbose="${build.verbose}" fork="${build.fork}" nowarn="${build.nowarn}"
			 deprecation="${build.deprecation}" debug="${debug.state}" compiler="${compiler}"
			 source="${java.target_version}" target="${java.target_version}" memoryMaximumSize="${memory.maximum}"
			 excludes="${std_excludes}" listfiles="false"/>
	</target>

	<macrodef name="build-demo">
   		<attribute name="name"/>
		<element name="copy-assets" optional="yes"/>
   		<sequential>
			<mkdir dir="${webapps.build.dir}/@{name}/WEB-INF/classes"/>
			<mkdir dir="${webapps.build.dir}/@{name}/WEB-INF/lib"/>

			<javac sourcepath="" srcdir="${webapps.dir}/@{name}/WEB-INF/src" destdir="${webapps.build.dir}/@{name}/WEB-INF/classes"
			       classpathref="webapps.classpath" optimize="${build.optimize}" verbose="${build.verbose}"
			       fork="${build.fork}" nowarn="${build.nowarn}" deprecation="${build.deprecation}"
			       debug="${debug.state}" compiler="${compiler}" source="${java.target_version}" target="${java.target_version}"/>

			<copy todir="${webapps.build.dir}/@{name}" filtering="true">
				<fileset dir="webapps/@{name}">
					<exclude name="**/src/**"/>
					<exclude name="**/*.flv"/>
					<exclude name="**/*.meta"/>
				</fileset>
			</copy>

			<!-- copy other demo files (optional) -->
			<copy-assets/>
      		</sequential>
	</macrodef>
	
	<macrodef name="logback">
   		<attribute name="webapp"/>
   		<sequential>
			<!-- copy the logback config per webapp and associated jars -->
			<copy todir="${webapps.build.dir}/@{webapp}/WEB-INF/classes" file="webapps/@{webapp}/WEB-INF/src/logback.xml" overwrite="true"/>
			<copy todir="${webapps.build.dir}/@{webapp}/WEB-INF/lib">
				<fileset dir="${lib.dir}">
					<include name="slf4j-api-1.4.3.jar"/>
					<include name="logback-core-0.9.8.jar"/>
					<include name="logback-classic-0.9.8.jar"/>
				</fileset>
			</copy>		
      		</sequential>
	</macrodef>
	
	<!-- Demos -->
	<target name="compile_demos" description="Build demo apps">
		<echo message="Webapps dir: ${webapps.dir}"/>
		<echo message="Webapps build dir: ${webapps.build.dir}"/>

	</target>

	<!-- Scripting -->
	<target name="compile_script" depends="prepare">
		<available property="scripting_compatibility" classpathref="project.classpath" classname="javax.script.ScriptEngineManager"/>
		<condition property="scripting.using" value="Scripting compatibility is available." 
			   else="No compatibility for scripting available">
			<istrue value="${scripting_compatibility}"/>
		</condition>
		<javac sourcepath="" srcdir="${src.dir}" destdir="${dest.dir}" classpathref="script.classpath"
			 optimize="${build.optimize}" verbose="${build.verbose}" fork="${build.fork}" nowarn="${build.nowarn}"
			 deprecation="${build.deprecation}" debug="${debug.state}" compiler="${compiler}"
			 source="${java.target_version}" target="${java.target_version}" memoryMaximumSize="${memory.maximum}"
			 includes="org/red5/server/script/**" listfiles="false"/>
		<echo message="${scripting.using}"/>
	</target>

	<target name="compile_war" depends="-java6.check, clean, prepare">
		<!-- token replacement filers -->
		<property name="filter.file" value="conf/war/build_war.properties"/>
		<condition property="java.target_version" value="1.6">
			<not>
				<isset property="java.target_version"/>
			</not>
		</condition>
		<echo message="javac version: ${java.target_version}"/>

		<condition property="compiler" value="${build.compiler}${java.target_version}">
			<equals arg1="${build.compiler}" arg2="javac"/>
		</condition>
		<property name="compiler" value="${build.compiler}"/>
		<echo message="Compiler adapter name: ${compiler}"/>

		<mkdir dir="${classes.dir}/WEB-INF/classes"/>
		<property name="dest.dir" value="${classes.dir}/WEB-INF/classes"/>
		<property name="std_excludes" value="**/*.jsp,org/red5/server/script/**,org/red5/server/jetty/**,org/red5/server/tomcat/**,org/red5/server/midi/**,org/red5/server/net/rtmpt/*Loader.java,org/red5/server/net/servlet/RTMPTServlet.java,org/red5/server/net/servlet/StatisticsServlet.java,org/red5/server/net/servlet/ZAMFGatewayServlet.java,org/red5/server/ContextLoader.java,org/red5/server/DebugPooledByteBufferAllocator.java,org/red5/server/Standalone.java"/>
		<antcall target="compile_core" inheritAll="true" inheritRefs="true"/>
		<antcall target="compile_core_compatibility" inheritAll="true" inheritRefs="true"/>

		<!-- libraries and classes needed for building the demos -->
		<path id="webapps.classpath">
			<fileset dir="${lib.dir}">
				<filename name="*.jar"/>
			</fileset>
			<pathelement location="${dest.dir}"/>
		</path>
		<antcall target="compile_demos" inheritAll="true" inheritRefs="true"/>

		<!-- only certain classes from selected demos are copied to the war -->
		<copy todir="${classes.dir}/WEB-INF/classes">
			<fileset dir="${webapps.build.dir}/admin/WEB-INF/classes"/>
			<fileset dir="${webapps.build.dir}/bwcheck/WEB-INF/classes"/>
			<fileset dir="${webapps.build.dir}/echo/WEB-INF/classes"/>
			<fileset dir="${webapps.build.dir}/fitcDemo/WEB-INF/classes"/>
			<fileset dir="${webapps.build.dir}/oflaDemo/WEB-INF/classes"/>
			<fileset dir="${webapps.build.dir}/tutorial/WEB-INF/classes"/>
		</copy>
		<antcall target="compile_script" inheritAll="true" inheritRefs="true">
			<param name="dest.dir" value="${classes.dir}/WEB-INF/classes"/>
		</antcall>
	</target>

	<macrodef name="compile-wardemo">
   		<attribute name="name"/>
   		<sequential>
			<war destfile="${dist.dir}/@{name}.war" webxml="${webapps.build.dir}/@{name}/WEB-INF/web.xml">
				<fileset dir="${webapps.build.dir}/@{name}">
					<exclude name="WEB-INF"/>
					<exclude name="**/src/**"/>
				</fileset>
				<manifest>
					<attribute name="Built-By" value="${red5.fullname}"/>
					<attribute name="Built-On" value="${build.TODAY}"/>
				</manifest>
			</war>	
      		</sequential>
	</macrodef>

	<target name="war_demos" description="Build wars for demo apps" depends="compile_demos">
		<!-- war up root -->
		<war destfile="${dist.dir}/ROOT.war" webxml="${webapps.build.dir}/root/WEB-INF/web.xml">
			<fileset dir="${webapps.build.dir}/root"/>
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</war>
		
		<!-- war up demos -->
		<compile-wardemo name="admin"/>
		<compile-wardemo name="bwcheck"/>
		<compile-wardemo name="fitcDemo"/>
		<compile-wardemo name="echo"/>		
		<compile-wardemo name="oflaDemo"/>
		<compile-wardemo name="SOSample"/>
		<compile-wardemo name="tutorial"/>
		<compile-wardemo name="test"/>
		<compile-wardemo name="messageRecorder"/>
	</target>

	<target name="javadoc" description="Generate JavaDoc">
		<condition property="available.envpath" value="Path: ${env.Path}"
			   else="Not using env.Path">
			<isset property="env.Path"/>
		</condition>
		<echo message="${available.envpath}"/>
		<!-- Determine the location of Sun's API docs -->
		<condition property="javadoc.loc" value="javase/6">
			<equals arg1="${java6.installed}" arg2="true"/>
		</condition>
		<condition property="javadoc.loc" value="j2se/1.5.0">
			<not>
				<equals arg1="${java6.installed}" arg2="true"/>
			</not>
		</condition>
		<echo message="Javadoc API stub: ${javadoc.loc}"/>
		<javadoc useexternalfile="true" failonerror="false" verbose="false" classpathref="full.classpath"
			 destdir="${javadoc.dir}" author="true" version="true" use="true" splitindex="true"
			 windowtitle="${documentation.title}">
			<fileset dir="${src.dir}" defaultexcludes="yes">
				<include name="org/red5/**"/>
				<exclude name="**/*.xml"/>
				<exclude name="**/*.xsd"/>
			</fileset>
			<doctitle><![CDATA[<h1>${documentation.title}</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; ${red5.age} <a href="${red5.url}" target="_blank">${red5.name}</a></i>]]></bottom>
			<tag name="todo" scope="all" description="To do:"/>
			<group title="Public API" packages="org.red5.server.api:org.red5.server.api.*"/>
			<group title="Network Protocols" packages="org.red5.server.net:org.red5.server.net.*"/>
			<group title="Streaming" packages="org.red5.server.stream:org.red5.server.stream.*"/>
			<group title="IO Packages" packages="org.red5.io:org.red5.io.*"/>
			<group title="Scripting" packages="org.red5.server.script:org.red5.server.script.*"/>
			<link href="http://java.sun.com/${javadoc.loc}/docs/api"/>
			<link href="http://jetty.mortbay.org/apidocs"/>
			<link href="http://mina.apache.org/report/1.1/apidocs"/>
			<link href="http://static.springframework.org/spring/docs/2.0.x/api"/>
			<link href="http://www.opensymphony.com/quartz/api"/>
			<link href="http://www.slf4j.org/api"/>
			<link href="http://logging.apache.org/log4j/1.2/apidocs"/>
			<link href="http://www.beanshell.org/javadoc"/>
			<link href="http://groovy.codehaus.org/api"/>
			<link href="http://tomcat.apache.org/tomcat-6.0-doc/api"/>
			<link href="http://ehcache.sourceforge.net/javadoc"/>
			<link href="https://whirlycache.dev.java.net/nonav/api"/>
		</javadoc>
	</target>

	<macrodef name="compile-jardemo">
   		<attribute name="name"/>
		<element name="copy-assets" optional="yes"/>
   		<sequential>
			<jar destfile="${webapps.build.dir}/@{name}/WEB-INF/lib/@{name}.jar">
				<fileset dir="${webapps.build.dir}/@{name}/WEB-INF/classes">
					<include name="**"/>
				</fileset>
			</jar>
			<!-- copy files (optional) -->
			<copy-assets/>
      		</sequential>
	</macrodef>

	<target name="jar" description="Make Archive" depends="compile">
		<mkdir dir="${classes.dir}/conf"/>
		<copy todir="${classes.dir}/conf">
			<fileset dir="${config.dir}">
				<exclude name="**/war/**"/>
				<exclude name="**/jboss/**"/>
			</fileset>
		</copy>

		<manifestclasspath property="jar.classpath" jarfile="${red5.filename}.jar">
			<classpath refid="runtime.classpath"/>
		</manifestclasspath>

		<jar destfile="${red5.filename}.jar">
			<fileset dir="${classes.dir}">
				<include name="**"/>
				<exclude name="testcases/**"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Main-Class" value="org.red5.server.Standalone"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
			<metainf dir="${src.dir}/META-INF">
				<include name="**"/>
			</metainf>
		</jar>

	</target>

	<target name="dist" description="Make Binary distribution" depends="clean, jar">
		<copy todir="${dist.dir}/lib">
			<fileset dir="lib"/>
		</copy>
		<copy todir="${dist.dir}/conf">
			<fileset dir="${config.dir}">
				<!-- exclude war config files -->
				<exclude name="**/war/**"/>
				<exclude name="**/jboss/**"/>
			</fileset>
		</copy>
		<copy todir="${dist.dir}/webapps" file="webapps\red5-default.xml"/>
		<copy todir="${dist.dir}">
			<fileset dir="./">
				<include name="ivy.xml"/>
				<include name="ivyconfig.xml"/>
				<include name="${red5.filename}.jar"/>
				<include name="red5.bat"/>
				<include name="red5-shutdown.bat"/>
				<include name="red5.sh"/>
				<include name="red5-shutdown.sh"/>
				<include name="license.txt"/>
			</fileset>
		</copy>
		<chmod file="${dist.dir}/red5.sh" perm="755"/>
		<chmod file="${dist.dir}/red5-shutdown.sh" perm="755"/>
	</target>

	<target name="server" depends="compile" description="Compile and start the server">
		<mkdir dir="${dist.dir}/conf"/>
		<copy todir="${dist.dir}/conf">
			<fileset dir="${config.dir}">
				<exclude name="**/war/**"/>
				<exclude name="**/jboss/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.dir}/${log.dir}"/>		
		<copy todir="${dist.dir}/webapps" file="webapps\red5-default.xml"/>
		<java classname="org.red5.server.Standalone" fork="true">
			<classpath>
				<pathelement location="${dist.dir}/conf"/>
				<pathelement location="${classes.dir}"/>
				<path refid="full.classpath"/>
			</classpath>
			<jvmarg value="-Djava.security.manager"/>
			<jvmarg value="-Djava.security.policy=${dist.dir}/conf/red5.policy"/>
			<jvmarg value="-Dred5.root=${dist.dir}"/>
			<!-- enable the following 2 lines if your using JMX with SSL -->
			<!--
			<jvmarg value="-Djavax.net.ssl.keyStore=${config.dir}/keystore.jmx"/>
			<jvmarg value="-Djavax.net.ssl.keyStorePassword=password"/>
			-->
		</java>
	</target>

	<target name="shutdown">
		<java classname="org.red5.server.Shutdown" fork="true">
			<classpath>
				<pathelement location="${dist.dir}/conf"/>
				<pathelement location="${classes.dir}"/>
				<path refid="full.classpath"/>
			</classpath>
			<jvmarg value="-Djava.security.manager"/>
			<jvmarg value="-Djava.security.policy=${dist.dir}/conf/red5.policy"/>
			<jvmarg value="-Dred5.root=${dist.dir}"/>
			<!-- enable the following 2 lines if your using JMX with SSL and auth -->
			<!--
			<jvmarg value="-Djavax.net.ssl.trustStore=${config.dir}/truststore.jmx"/>
			<jvmarg value="-Djavax.net.ssl.trustStorePassword=trustword"/>
			-->
			<arg value="9999"/>
			<arg value="red5user"/>
			<arg value="changeme"/>
		</java>
	</target>

	<target name="udp_server" depends="compile" description="Compile and start experimental UDP server">
        	<java classname="org.red5.server.net.udp.Standalone" fork="true">
            		<classpath>
                		<pathelement location="${config.dir}"/>
                		<pathelement location="${classes.dir}"/>
                		<path refid="full.classpath"/>
            		</classpath>
            		<jvmarg value="-Djava.security.manager"/>
            		<jvmarg value="-Djava.security.policy=${config.dir}/red5.policy"/>
        	</java>
	</target>

	<target name="run-tests" depends="compile_tests" description="Run JUnit tests and generate HTML reports">
		<junit fork="true" haltonfailure="no" printsummary="no" showoutput="no" dir="${testreports.dir}">
			<classpath>
				<path refid="full.classpath"/>
				<pathelement location="${testclass.dir}"/>
			</classpath>
			<formatter type="xml"/>
			<batchtest todir="${testreports.dir}">
				<fileset dir="${testclass.dir}">
					<include name="**/*Test.class"/>
					<exclude name="**/Abstract*Test.class"/>
					<exclude name="**/*AbstractTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${test.dir}">
			<fileset dir="${testreports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${testdoc.dir}"/>
		</junitreport>
	</target>

	<target name="compile_tests" description="Compiles junit test classes">
		<echo>Libraries checked: ${library.installed}</echo>
		<antcall target="retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="test"/>
		</antcall>
		<available property="junit.installed" classname="junit.framework.TestCase"/>
		<javac srcdir="${test.dir}" destdir="${testclass.dir}">
			<classpath>
				<path refid="full.classpath"/>
			</classpath>
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="webwar" description="Make Web Archive" depends="compile_war">
		<!-- token replacement filers -->
		<filter filtersfile="${config.dir}/war/build_war.properties"/>
		<copy todir="${classes.dir}">
			<fileset dir=".">
				<include name="license.txt"/>
			</fileset>
		</copy>
		
		<!-- remove directories we dont want -->
		<delete dir="${classes.dir}/testcases"/>		
		<!-- cleanup "standalone" red5-web files -->
       		<delete>
            		<fileset dir="${webapps.build.dir}" includes="**/red5-web.*"/>
        	</delete>		
		
		<!-- add the configs to the root war -->
		<filter token="display.name" value=""/>
		<filter token="webapp.root.key" value="/"/>
		<filter token="context.path" value="/"/>
		<copy tofile="${webapps.build.dir}/root/META-INF/context.xml" overwrite="true" filtering="true"				
			file="${config.dir}/war/root-context.xml"/>
		<copy todir="${webapps.build.dir}/root/WEB-INF" overwrite="true" filtering="true">
			<fileset dir="${config.dir}/war">
				<include name="web.xml"/>
			</fileset>
		</copy>		
		<copy todir="${webapps.build.dir}/root/WEB-INF/classes" overwrite="true" filtering="true">
			<fileset dir="${config.dir}">
				<include name="*.jmx"/>
				<include name="access.properties"/>
				<include name="password.properties"/>
			</fileset>
			<fileset dir="${config.dir}/war">
				<include name="logback.xml"/>
				<include name="beanRefContext.xml"/>
				<include name="defaultContext.xml"/>
				<include name="red5-common.xml"/>
				<include name="red5-core.xml"/>
				<include name="*-web.xml"/>
			</fileset>
		</copy>		
		<!-- copy the demo streams -->
		<copy todir="${webapps.build.dir}/root">
			<fileset dir="${webapps.build.dir}/oflaDemo">
				<include name="streams/*.flv"/>
				<exclude name="**/logback.xml"/>
			</fileset>
		</copy>
		<!-- war up root -->
		<war destfile="${dist.dir}/ROOT.war" webxml="${webapps.build.dir}/root/WEB-INF/web.xml">
			<fileset dir="${webapps.build.dir}/root"/>
			<fileset dir="${classes.dir}">
				<exclude name="**/logback.xml"/>
			</fileset>
			<lib dir="${lib.dir}">
				<exclude name="*.properties"/>
				<exclude name="jsp*.jar"/>
				<exclude name="servlet*.jar"/>
				<exclude name="catalina*.jar"/>
				<exclude name="tomcat*.jar"/>
				<exclude name="annotations-api*.jar"/>
				<exclude name="el-api*.jar"/>
				<exclude name="jetty*.jar"/>
				<exclude name="jasper*.jar"/>
				<exclude name="ehcache*.jar"/>
				<exclude name="whirly*.jar"/>
				<exclude name="Grobo*.jar"/>
				<exclude name="grobo*.jar"/>
				<exclude name="junit*.jar"/>
				<exclude name="ivy*.jar"/>
			</lib>			
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</war>				
				
		<!-- Demo applications (Admin and Echo use AMF and therefore need wars) -->
		<filter token="context.path" value="/admin"/>
		<copy tofile="${webapps.build.dir}/admin/META-INF/context.xml" overwrite="true" filtering="true"				
			file="${config.dir}/war/context.xml"/>
		<copy todir="${webapps.build.dir}/admin/WEB-INF" overwrite="true" verbose="true">
			<fileset dir="${config.dir}/war/admin">
				<include name="web.xml"/>
			</fileset>
		</copy>		
		<war destfile="${dist.dir}/admin.war" webxml="${webapps.build.dir}/admin/WEB-INF/web.xml">
			<fileset dir="${webapps.build.dir}/admin"/>
			<fileset dir="${classes.dir}">
				<include name="**/AMFTunnelServlet.class"/>
				<include name="**/ServletUtils.class"/>
			</fileset>
			<lib dir="${lib.dir}">
				<include name="commons-codec-*.jar"/>
				<include name="commons-httpclient-*.jar"/>
				<include name="*-over-slf4j-*.jar"/>
				<include name="mina-core-*.jar"/>
				<exclude name="slf4j-*.jar"/>
				<exclude name="logback-*.jar"/>
			</lib>			
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</war>	
		
		<filter token="context.path" value="/echo"/>
		<copy tofile="${webapps.build.dir}/echo/META-INF/context.xml" overwrite="true" filtering="true"				
			file="${config.dir}/war/context.xml"/>
		<copy todir="${webapps.build.dir}/echo/WEB-INF" overwrite="true" verbose="true">
			<fileset dir="${config.dir}/war/echo">
				<include name="web.xml"/>
			</fileset>
		</copy>		
		<war destfile="${dist.dir}/echo.war" webxml="${webapps.build.dir}/echo/WEB-INF/web.xml">
			<fileset dir="${webapps.build.dir}/echo"/>
			<fileset dir="${classes.dir}">
				<include name="**/AMFTunnelServlet.class"/>
				<include name="**/ServletUtils.class"/>
			</fileset>
			<lib dir="${lib.dir}">
				<include name="commons-codec-*.jar"/>
				<include name="commons-httpclient-*.jar"/>
				<include name="*-over-slf4j-*.jar"/>
				<include name="mina-core-*.jar"/>
				<exclude name="slf4j-*.jar"/>
				<exclude name="logback-*.jar"/>
			</lib>			
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</war>			
		
		<!-- cleanup -->
		<delete dir="${dist.dir}/webapps"/>
	</target>

	<target name="remotejar" description="Creates a jar that may be deployed with remote applications" depends="compile">
		<mkdir dir="${classes.dir}/conf"/>
		<copy todir="${classes.dir}/conf">
			<fileset dir="${config.dir}">
				<exclude name="**/war/**"/>
				<exclude name="**/jboss/**"/>
			</fileset>
		</copy>
		<jar destfile="${dist.dir}/red5-remoting.jar">
			<fileset dir="${classes.dir}">
				<include name="**/AMFTunnelServlet.class"/>
				<include name="**/ServletUtils.class"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</jar>	
	</target>

	<target name="all" depends="clean, prepare, compile, jar, javadoc" description="Run all server tasks"/>

	<target name="usage">
		<echo message="Type ant -p for available targets"/>
	</target>
</project>
