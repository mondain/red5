<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

	<!-- This context is shared between all child contexts. -->

	<bean id="red5.server" class="org.red5.server.Server"  />

	<bean id="serializer" class="org.red5.io.object.Serializer" />
	
	<bean id="deserializer" class="org.red5.io.object.Deserializer" />
	
	<bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService" 
		autowire="byType" init-method="initialize" />
	
	<bean id="rtmpCodecFactory" class="org.red5.server.net.rtmp.codec.RTMPMinaCodecFactory" 
		autowire="byType" init-method="init" />
		
	<bean id="remotingCodecFactory" class="org.red5.server.net.remoting.codec.RemotingCodecFactory" 
		autowire="byType" init-method="init" />
	
	<bean id="videoCodecFactory" class="org.red5.server.stream.VideoCodecFactory">
		<property name="codecs">
			<list>
				<bean id="screenVideoCodec" class="org.red5.server.stream.codec.ScreenVideo"/>
				<!--
				<bean id="sorensonVideoCodec" class="org.red5.server.stream.codec.SorensonVideo"/>
				-->
			</list>
		</property>
	</bean>
    
	<bean id="streamableFileFactory" class="org.red5.io.StreamableFileFactory">
		<property name="services">
			<list>
				<bean id="flvFileService" class="org.red5.io.flv.impl.FLVService">
					<property name="generateMetadata" value="true" />
				</bean>
				<bean id="mp3FileService" class="org.red5.io.mp3.impl.MP3Service"/>
			</list>
		</property>
	</bean>
    
    <!-- handles creation / lookup of shared objects -->
    <bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
        <property name="persistenceClassName">
            <value>org.red5.server.persistence.FilePersistence</value>
        </property>
    </bean>
    
    <!-- high level access to streams -->
    <bean id="streamService" class="org.red5.server.stream.StreamService" />
    
    <bean id="providerService" class="org.red5.server.stream.ProviderService" />
    
    <bean id="consumerService" class="org.red5.server.stream.ConsumerService" />
    
    <bean id="FlowControlService" class="org.red5.server.stream.BalancedFlowControlService"
    	init-method="init" >
    	<property name="interval" value="10"/>
    	<property name="defaultCapacity" value="102400"/>
    </bean>
    
    <bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService" />
    
    <!-- threadpool settings for the remoting clients -->
    <bean id="remotingPool" class="org.mortbay.thread.BoundedThreadPool"
          init-method="start">
        <property name="minThreads" value="2" />
        <property name="maxThreads" value="8" />
    </bean>
    
	<!-- Now we can load the cache engine -->
	<!-- bean id="object.cache" class="org.red5.server.cache.CacheImpl" init-method="init" autowire="byType"> 
		<property name="maxEntries"><value>5</value></property>
	</bean -->
	
	<bean id="object.cache" class="org.red5.server.cache.WhirlyCacheImpl" init-method="init" autowire="byType">
		<property name="maxEntries" value="5" />
		<property name="cacheConfig">
			<bean class="com.whirlycott.cache.CacheConfiguration">
				<property name="name" value="flv.cache" />
				<property name="maxSize" value="5" />
				<!-- This policy removes cached items, biased towards least frequently used (LFU) Items -->
				<property name="policy"><value>com.whirlycott.cache.policy.LFUMaintenancePolicy</value></property>
				<!-- This policy removes cached items, biased towards least recently used (LRU) Items -->
				<!-- property name="policy"><value>com.whirlycott.cache.policy.LRUMaintenancePolicy</value></property -->
				<!-- This policy removes cache items in the order in which they were added -->
				<!-- property name="policy"><value>com.whirlycott.cache.policy.FIFOMaintenancePolicy</value></property -->
				<!-- A predicate for filtering Collections of Items based on their expiration time -->
				<!-- property name="policy"><value>com.whirlycott.cache.policy.ExpirationTimePredicate</value></property -->		
				<!-- property name="backend"><value>com.whirlycott.cache.impl.ConcurrentHashMapImpl</value></property -->
				<property name="backend"><value>com.whirlycott.cache.impl.FastHashMapImpl</value></property>
			</bean>
		</property>
	</bean>  
    
</beans>
