package org.red5.samples.echo.data {	/**	 * RED5 Open Source Flash Server - http://www.osflash.org/red5	 *	 * Copyright (c) 2006-2007 by respective authors (see below). All rights reserved.	 *	 * This library is free software; you can redistribute it and/or modify it under the	 * terms of the GNU Lesser General Public License as published by the Free Software	 * Foundation; either version 2.1 of the License, or (at your option) any later	 * version.	 *	 * This library is distributed in the hope that it will be useful, but WITHOUT ANY	 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A	 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.	 *	 * You should have received a copy of the GNU Lesser General Public License along	 * with this library; if not, write to the Free Software Foundation, Inc.,	 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA	*/		import flash.display.BitmapData;
	import flash.utils.ByteArray;
	
	import mx.collections.ArrayCollection;
	import mx.utils.ObjectProxy;
	
	import org.red5.samples.echo.EchoClass;
	import org.red5.samples.echo.ExternalizableClass;
	import org.red5.samples.echo.RemoteClass;
	import org.red5.utils.PNGEnc;		/**	 * 	 * @author Joachim Bauch ( jojo@struktur.de )	 * @author Thijs Triemstra ( info@collab.nl )	 */	public class EchoTestData	{		// Stores the test data		private var _items	: Array;				/**		 * 		 */				public function EchoTestData()		{			// Add AMF0 specific tests below						// null			if ( null_test.selected ) {				_items.push(null);			}			// undefined			if ( undefined_test.selected ) {				_items.push(undefined);			}			// Boolean			if ( boolean_test.selected ) {				_items.push(true);				_items.push(false);			}			// String			if ( string_test.selected ) {				_items.push("");				_items.push("Hello world!");				var strings: Array = new Array();				strings.push("test1");				strings.push("test2");				strings.push("test3");				strings.push("test4");				_items.push(strings);				// long Strings				var i: Number;				var longString: String = "";				// 40,000 chars				for (i=0; i<4000; i++)					longString = longString + "0123456789";				_items.push(longString);				// 70,000 chars				var reallyLongString: String = "";				for (i=0; i<7000; i++)					reallyLongString = reallyLongString + "0123456789";				_items.push(reallyLongString);				// 100,000 chars				var evenLongerString: String = "";				for (i=0; i<100000; i++)					evenLongerString = evenLongerString + "0123456789";				_items.push(evenLongerString);			}			// Number			if ( number_test.selected ) {				_items.push(0);				_items.push(1);				_items.push(-1);				_items.push(256);				_items.push(-256);				_items.push(65536);				_items.push(-65536);				_items.push(Number.NaN);				_items.push(Number.NEGATIVE_INFINITY);				_items.push(Number.POSITIVE_INFINITY);				_items.push(Number.MAX_VALUE);				_items.push(Number.MIN_VALUE);				_items.push(0.0);				_items.push(1.5);				_items.push(-1.5);				_items.push(0x000000);			}			// Arrays			if ( array_test.selected ) {				_items.push(new Array());				var tmp1: Array = new Array();				tmp1.push(1);				_items.push(tmp1);				_items.push([1, 2]);				_items.push([1, 2, 3]);				_items.push([1, 2, [1, 2]]);				var tmp2: Array = new Array();				tmp2.push(1);				tmp2[100] = 100;				_items.push(tmp2);				var tmp3: Array = new Array();				tmp3.push(1);				tmp3["one"] = 1;				_items.push(tmp3);			}			// Object			if (object_test.selected ) {				var tmp4: Object = {a: "foo", b: "bar"};				_items.push(tmp4);				var tmp5: Array = new Array();				tmp5.push(tmp4);				tmp5.push(tmp4);				_items.push(tmp5);			}			// Date			if (date_test.selected ) {				var now: Date = new Date();				_items.push(now);				var tmp6: Array = new Array();				tmp6.push(now);				tmp6.push(now);				_items.push(tmp6);			}						// XML for ActionScript 1.0 and 2.0			if (xml3_test.selected ) {							}						// Custom class			if (custom_test.selected ) {				var tmp7: EchoClass = new EchoClass();				tmp7.attr1 = "one";				tmp7.attr2 = 1;				_items.push(tmp7);				var tmp8: Array = new Array();				tmp8.push(tmp7);				tmp8.push(tmp7);				_items.push(tmp8);			}			// Remote class			if (remote_test.selected ) {				var remote: RemoteClass = new RemoteClass();				remote.attribute1 = "one";				remote.attribute2 = 2;				_items.push(remote);				var tmp9: Array = new Array();				var remote1: RemoteClass = new RemoteClass();				remote1.attribute1 = "one";				remote1.attribute2 = 1;				tmp9.push(remote1);				var remote2: RemoteClass = new RemoteClass();				remote2.attribute1 = "two";				remote2.attribute2 = 2;				tmp9.push(remote2);				_items.push(tmp9);				var remote3: RemoteClass = new RemoteClass();				remote3.attribute1 = "three";				remote3.attribute2 = 1234567890;				_items.push(remote3);				var remote4: RemoteClass = new RemoteClass();				remote4.attribute1 = "four";				remote4.attribute2 = 1185292800000;				_items.push(remote4);			}			AMF0Count = _items.length;						// Add AMF3 specific tests below						// XML for ActionScript 3.0			if ( xml3_test.selected ) {				XML.ignoreComments = false;				XML.ignoreProcessingInstructions = false;				XML.prettyIndent = 0;				XML.prettyPrinting = false;				var customSettings:Object = XML.settings();				var tmpXML:XML =	                <employees>	                    <employee ssn="123-123-1234">	                        <name first="John" last="Doe"/>	                        <address>	                            <street>11 Main St.</street>	                            <city>San Francisco</city>	                            <state>CA</state>	                            <zip>98765</zip>	                        </address>	                    </employee>	                    <employee ssn="789-789-7890">	                        <name first="Mary" last="Roe"/>	                        <address>	                            <street>99 Broad St.</street>	                            <city>Newton</city>	                            <state>MA</state>	                            <zip>01234</zip>	                        </address>	                    </employee>	                </employees>;	            _items.push(tmpXML);	            var tmp10: Array = new Array();				tmp10.push(tmpXML);				tmp10.push(tmpXML);				_items.push(tmp10);			}			// Externalizable			if ( externalizable_test.selected ) {				var ext: ExternalizableClass = new ExternalizableClass();				_items.push(ext);				var tmp_1: Array = new Array();				tmp_1.push(ext);				tmp_1.push(ext);				_items.push(tmp_1);			}			// ArrayCollection			if ( arraycollection_test.selected ) {				var tmp11: ArrayCollection = new ArrayCollection();				tmp11.addItem("one");				tmp11.addItem(1);				tmp11.addItem(null);				_items.push(tmp11);			}			// ObjectProxy			if ( objectproxy_test.selected ) {				var temp12: ObjectProxy = new ObjectProxy({ a: "foo", b: 5 });				_items.push(temp12);				var temp13: Array = new Array();				temp13.push(temp12);				temp13.push(temp12);				_items.push(temp13);			}			// ByteArray			if ( bytearray_test.selected ) {				var bmp:BitmapData = new BitmapData( 80, 80, false, 0xCCCCCC );				// draw a red line in a BitmapData object				for (var g:uint = 0; g < 80; g++) {				    var red:uint = 0xFF0000;				    bmp.setPixel( g, 40, red );				}				// Create ByteArray with PNG data				var temp14: ByteArray = PNGEnc.encode( bmp );				temp14.compress();				_items.push(temp14);				var tmp15: Array = new Array();				tmp15.push(temp14);				tmp15.push(temp14);				_items.push(tmp15);			}		}				/**		 * 		 * @return test params		 */				public function get items(): Array		{			return _items;		}			}}