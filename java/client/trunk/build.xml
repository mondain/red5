<?xml version="1.0" ?>
<project name="Red5" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- This build file requires Apache Ant >= 1.7 -->
	<condition property="ant-at-least-7">
		<antversion atleast="1.7.0"/>
	</condition>
	<!-- project properties -->
	<property environment="env"/>
	<property name="java.home" value="${env.JDK_HOME}"/>
	<property name="src.dir" value="src"/>
	<property name="dist.dir" value="dist"/>
	<property name="log.dir" value="log"/>
	<property name="lib.dir" value="lib"/>
	<property name="classes.dir" value="bin"/>
	<property name="config.dir" value="src/conf"/>
	<property name="javadoc.dir" value="doc/api"/>
	<property name="debug.state" value="true"/>
	<!-- Documentation properties -->
	<property name="doc.ref.dir" value="doc/reference"/>
	<property name="doc.ref.lib" value="${doc.ref.dir}/lib"/>
	<property name="javadoc.style" value="${doc.ref.dir}/styles/javadoc.css"/>
	<!-- unit testing -->
	<property name="test.dir" value="test"/>
	<property name="testclass.dir" value="bin/testcases/classes"/>
	<property name="testreports.dir" value="bin/testcases/testreports"/>
	<property name="testdoc.dir" value="doc/test"/>
    <!-- user overides for project properties -->
    <property file="${user.home}/build.properties"/>
	<!-- base project properties -->
	<property file="build.properties"/>
	<tstamp prefix="build">
		<format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
	</tstamp>
	<!--
	    Ivy tasks and lib directory 
	        http://ant.apache.org/ivy
	        http://testearly.com/2007/06/24/ivy-in-42-steps
	-->
	<taskdef uri="antlib:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml" classpath="${lib.dir}/${ivy.version}.jar"/>
	<!-- Latest ivy 9/2008 seems to want absolute path -->
	<property name="ivy.lib.dir" value="${basedir}/lib"/>
	<path id="project.classpath">
		<fileset dir="${lib.dir}"/>
	</path>
	<path id="script.classpath">
		<fileset dir="${lib.dir}"/>
		<pathelement location="${classes.dir}"/>
	</path>
	<path id="runtime.classpath">
		<fileset dir="${lib.dir}">
			<exclude name="*robo*.jar"/>
			<exclude name="junit*.jar"/>
			<exclude name="ivy*.jar"/>
		</fileset>
	</path>
	<!-- Build Targets -->
	<target name="-java6.check">
		<condition property="java6.installed" value="true">
			<and>
				<or> 
                	<equals arg1="${java.target_version}" arg2="1.6"/>
					<equals arg1="${java.target_version}" arg2="1.7"/>
                </or>
				<available property="java6.installed" classname="javax.script.Bindings"/>
			</and>
		</condition>
		<condition property="java6.using" value="1.6" else="${java.target_version}">
			<isset property="java6.installed"/>
		</condition>
		<echo message="Using Java ${java6.using} specification: ${java.specification.version}"/>
		<fail message="Unsupported Java version - detected: ${java.version} selected: ${java.target_version}. Only Java compiler version 1.6 or later are supported."> 
            <condition> 
            	<not>
                    <or> 
                    	<equals arg1="${java.target_version}" arg2="1.6"/>
                        <equals arg1="${java.target_version}" arg2="1.7"/>
                    </or>
            	</not>
            </condition> 
        </fail> 
	</target>
	<target name="prepare" description="Setup the directories for building">
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/${log.dir}"/>
		<mkdir dir="${testclass.dir}"/>
		<mkdir dir="${testreports.dir}"/>
	</target>
	<target name="clean" description="Clean the directories for building">
		<delete file="ivy.log"/>
		<delete dir="${classes.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${javadoc.dir}"/>
		<delete dir="${testdoc.dir}"/>
	</target>
	<target name="retrieve" description="Retrieves the libraries if needed">
		<!-- Ivy configuration - http://ant.apache.org/ivy/history/trunk/ant.html -->
		<ivy:settings file="ivysettings.xml"/>
		<condition property="ivy.conf.name" value="java6">
			<not>
				<isset property="ivy.conf.name"/>
			</not>
		</condition>
		<echo message="Ivy conf name: ${ivy.conf.name}"/>
		<ivy:resolve file="ivy.xml" conf="${ivy.conf.name}" checkIfChanged="false" transitive="false" />
		<ivy:retrieve conf="${ivy.conf.name}"/>
	</target>
	<target name="ivyclear" description="Clears out the Ivy cache">
		<delete dir="${user.home}/.ivy2/cache/red5"/>
		<delete includeemptydirs="true">
			<fileset dir="${lib.dir}" excludes="**/ivy*.jar"/>
		</delete>
		<ivy:cleancache/>
	</target>
	<target name="compile" depends="-java6.check, prepare, retrieve" description="Compiles the client">
		<condition property="java.target_version" value="1.6">
			<not>
				<isset property="java.target_version"/>
			</not>
		</condition>
		<echo message="javac version: ${java.target_version}"/>
		<condition property="eclipse.using" value="Using" else="Not using">
			<isset property="eclipse.running"/>
		</condition>
		<echo message="${eclipse.using} the Eclipse IDE"/>
		<condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
			<isset property="eclipse.running"/>
		</condition>
		<condition property="compiler" value="${build.compiler}${java.target_version}">
			<equals arg1="${build.compiler}" arg2="javac"/>
		</condition>
		<property name="compiler" value="${build.compiler}"/>
		<echo message="Compiler adapter name: ${compiler}"/>
		<!-- destination for compiled classes -->
		<property name="dest.dir" value="${classes.dir}"/>
		<javac sourcepath="" srcdir="${src.dir}" destdir="${dest.dir}" classpathref="project.classpath"
			 optimize="${build.optimize}" verbose="${build.verbose}" fork="${build.fork}" nowarn="${build.nowarn}"
			 deprecation="${build.deprecation}" debug="${debug.state}" compiler="${compiler}"
			 source="${java.target_version}" target="${java.target_version}" memoryMaximumSize="${memory.maximum}"
			 listfiles="false" includeantruntime="false"/>
	</target>
	<target name="javadoc" depends="-java6.check" description="Generate JavaDoc">
		<condition property="available.envpath" value="Path: ${env.Path}" else="Not using env.Path">
			<isset property="env.Path"/>
		</condition>
		<echo message="${available.envpath}"/>
		<!-- Determine the location of Sun's API docs -->
		<condition property="javadoc.loc" value="javase/6">
			<equals arg1="${java6.installed}" arg2="true"/>
		</condition>
		<delete>
			<fileset dir="${lib.dir}" includes="**/*sources*.jar"/>
		</delete>
		<javadoc useexternalfile="true" failonerror="false" verbose="false" classpathref="full.classpath"
			 destdir="${javadoc.dir}" author="true" version="true" use="true" splitindex="true"
			 windowtitle="${documentation.title}" stylesheetfile="${javadoc.style}">
			<fileset dir="${src.dir}" defaultexcludes="yes">
				<include name="org/red5/**"/>
				<exclude name="**/*.xml"/>
				<exclude name="**/*.xsd"/>
			</fileset>
			<doctitle><![CDATA[<h1>${documentation.title}</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; ${red5.age} <a href="${red5.url}" target="_blank">${red5.name}</a></i>]]></bottom>
			<tag name="todo" scope="all" description="To do:"/>
			<group title="Public API" packages="org.red5.server.api:org.red5.server.api.*"/>
            <group title="Client" packages="org.red5.client:org.red5.client.*"/>
            <group title="Network Protocols" packages="org.red5.server.net:org.red5.server.net.*"/>
			<group title="Streaming" packages="org.red5.server.stream:org.red5.server.stream.*"/>
			<group title="IO Packages" packages="org.red5.io:org.red5.io.*"/>
			<link href="http://download.oracle.com/${javadoc.loc}/docs/api"/>
			<link href="http://mina.apache.org/report/trunk/apidocs"/>
			<link href="http://www.slf4j.org/api"/>
		</javadoc>
		<echo message="Javadoc API stub: ${javadoc.loc}"/>
		<echo message="Javadoc CSS: ${doc.ref.dir} ${javadoc.style}"/>
	</target>
	<target name="jar" description="Make Archive" depends="compile">
		<jar destfile="${dist.dir}/${red5.filename}.jar">
			<fileset dir="${classes.dir}">
				<include name="**/org/**"/>
				<include name="**/META-INF**"/>
			</fileset>
			<manifest>
				<attribute name="Red5-Version" value="${red5.version}"/>
				<attribute name="Built-By" value="${red5.fullname}"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
			</manifest>
		</jar>
	</target>
	<target name="dist" description="Create binary distribution" depends="jar">
		<copy todir="${dist.dir}/lib">
			<fileset dir="${lib.dir}">
				<exclude name="ivy*.jar"/>
				<exclude name="junit*.jar"/>
				<exclude name="grobo*.jar"/>
				<exclude name="*-sources*.jar"/>
			</fileset>
		</copy>
	</target>
	<target name="run-tests" depends="compile-tests" description="Run unit tests and generate HTML reports">
		<!-- copy config contents to test conf dir -->
		<mkdir dir="${testdist.dir}/../bin/conf"/>
		<copy todir="${testdist.dir}/../bin/conf">
			<fileset dir="${src.dir}/conf">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		<junit fork="true" haltonfailure="no" printsummary="yes" showoutput="no" failureproperty="test.failure.property"
			 dir="${testreports.dir}">
			<classpath>
				<pathelement location="${testclass.dir}"/>
				<pathelement location="${testdist.dir}/conf"/>
				<pathelement location="${testdist.dir}/boot.jar"/>
				<pathelement location="${testdist.dir}/red5.jar"/>
				<path refid="full.classpath"/>
			</classpath>
			<formatter type="xml"/>
			<batchtest todir="${testreports.dir}">
				<fileset dir="${testclass.dir}">
					<include name="**/*Test.class"/>
					<exclude name="**/Abstract*Test.class"/>
					<exclude name="**/*AbstractTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<condition property="test.allPassed" else="yes" value=" !!!!!! NO !!!!!">
			<isset property="test.failure.property"/>
		</condition>
		<mkdir dir="${testdoc.dir}"/>
		<junitreport todir="${testdoc.dir}">
			<fileset dir="${testreports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${testdoc.dir}"/>
		</junitreport>
		<echo message="Did all tests pass: ${test.allPassed}"/>
	</target>
	<target name="compile-tests" depends="dist" description="Compiles unit test classes">
		<property name="testdist.dir" location="${testreports.dir}/dist"/>
		<echo>Making dist for testing</echo>
		<mkdir dir="${testdist.dir}"/>
		<mkdir dir="${testreports.dir}/fixtures"/>
		<mkdir dir="${testreports.dir}/log"/>
		<!-- Give the tests their own dist installation to work with -->
		<antcall target="dist" inheritAll="false" inheritRefs="false">
			<param name="dist.dir" value="${testdist.dir}"/>
		</antcall>
		<!-- Copy all test config files into the dist/conf of the
             test distribution.  The JUnit task below will add this
             directory to the classpath -->
		<copy todir="${testdist.dir}/conf" overwrite="true">
			<fileset dir="${test.dir}" includes="**/*.xml" excludes="www/**/*"/>
			<fileset dir="${test.dir}" includes="**/*.properties" excludes="www/**/*"/>
		</copy>
		<!-- Install the self-test application that tests depend on -->
		<copy todir="${testdist.dir}/webapps/selftest" overwrite="true">
			<fileset dir="${test.dir}/www/" includes="**/*"/>
		</copy>
		<copy todir="${testreports.dir}/fixtures" overwrite="true">
			<fileset dir="${test.dir}/fixtures" includes="**/*"/>
		</copy>
		<echo>Libraries checked: ${library.installed}</echo>
		<antcall target="retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="utest"/>
		</antcall>
		<available property="junit.installed" classname="junit.framework.TestCase"/>
		<mkdir dir="${testclass.dir}"/>
		<javac srcdir="${test.dir}" destdir="${testclass.dir}" optimize="${build.optimize}" verbose="${build.verbose}"
			 fork="${build.fork}" nowarn="${build.nowarn}" deprecation="${build.deprecation}"
			 debug="${debug.state}" compiler="${build.compiler}">
			<classpath>
				<pathelement location="${testdist.dir}/conf"/>
				<pathelement location="${testdist.dir}/boot.jar"/>
				<pathelement location="${testdist.dir}/red5.jar"/>
				<path refid="full.classpath"/>
			</classpath>
		</javac>
		<mkdir dir="${testdist.dir}/webapps/selftest/WEB-INF/classes"/>
		<copy todir="${testdist.dir}/webapps/selftest/WEB-INF/classes" overwrite="true">
			<fileset dir="${testclass.dir}" includes="**/*.class"/>
		</copy>
	</target>
	<target name="rtmps-keystore" description="RTMPS Keystore Generator">
		<input message="Keystore Pass" addproperty="keystore.storepass" defaultvalue="password"/>
		<input message="Certificate Validity" addproperty="keystore.validity" defaultvalue="365"/>
		<input message="Common Name" addproperty="keystore.dname.cn" defaultvalue="localhost"/>
		<input message="Organisation Unit" addproperty="keystore.dname.ou" defaultvalue="${red5.name}"/>
		<input message="Organisation" addproperty="keystore.dname.o" defaultvalue="${red5.name}"/>
		<input message="Location" addproperty="keystore.dname.l" defaultvalue="Henderson"/>
		<input message="State" addproperty="keystore.dname.st" defaultvalue="NV"/>
		<input message="Country" addproperty="keystore.dname.c" defaultvalue="US"/>
		<delete file="${config.dir}/keystore"/>
		<genkey alias="red5" keysize="512" keyalg="RSA" storepass="${keystore.storepass}" keypass="${keystore.storepass}"
			 keystore="${config.dir}/keystore" validity="${keystore.validity}">
			<dname>
				<param name="CN" value="${keystore.dname.cn}"/>
				<param name="OU" value="${keystore.dname.ou}"/>
				<param name="O" value="${keystore.dname.o}"/>
				<param name="L" value="${keystore.dname.l}"/>
				<param name="ST" value="${keystore.dname.st}"/>
				<param name="C" value="${keystore.dname.c}"/>
			</dname>
		</genkey>
	</target>
	<target name="truststore" depends="rtmps-keystore" description="JConsole Client Truststore">
		<copy file="${config.dir}/keystore" tofile="${config.dir}/keystore.jmx" overwrite="true"/>
		<copy file="${config.dir}/keystore.jmx" tofile="${config.dir}/truststore.jmx" overwrite="true"/>
		<echo>Verifying Keystore ${keystore.storepass}</echo>
		<exec dir="." executable="keytool">
			<arg line="-list -v -keystore ${config.dir}/keystore.jmx -storepass ${keystore.storepass}"/>
		</exec>
		<echo>Export Server Certificate</echo>
		<exec dir="." executable="keytool">
			<arg line="-export -alias red5 -keystore ${config.dir}/keystore.jmx -file ${config.dir}/red5server.cer -storepass ${keystore.storepass}"/>
		</exec>
		<echo>Import Server Certificate into TrustStore</echo>
		<exec dir="." executable="keytool">
			<arg line="-import -file conf/red5server.cer -keystore ${config.dir}/truststore.jmx -storepass ${keystore.storepass} -noprompt"/>
		</exec>
		<echo>Verifying Truststore</echo>
		<exec dir="." executable="keytool">
			<arg line="-list -v -keystore ${config.dir}/truststore.jmx -storepass ${keystore.storepass}"/>
		</exec>
	</target>
	<!-- JConsole -->
	<target name="console">
		<exec dir="." executable="jconsole">
			<arg line="-J-Djava.util.logging.config.file=${config.dir}/management.logging.properties -J-Djava.security.manager -J-Djava.security.policy=${config.dir}/red5.policy -J-Djavax.net.ssl.trustStore=${config.dir}/truststore.jmx -J-Djavax.net.ssl.trustStorePassword=password -J-Dssl.debug=true -J-Djava.security.debug=ssl service:jmx:rmi:///jndi/rmi://localhost:9999/red5"/>
		</exec>
	</target>
	<!-- JConsole with SSL -->
	<target name="console-ssl">
		<exec dir="." executable="jconsole">
			<arg line="-J-Djava.util.logging.config.file=${config.dir}/management.logging.properties -J-Djava.security.manager -J-Djava.security.policy=${config.dir}/red5.policy -J-Djavax.net.ssl.trustStore=${config.dir}/truststore.jmx -J-Djavax.net.ssl.trustStorePassword=password -J-Djavax.net.ssl.keyStore=${config.dir}/keystore.jmx -J-Djavax.net.ssl.keyStorePassword=password -J-Dssl.debug=true -J-Djava.security.debug=ssl service:jmx:rmi:///jndi/rmi://localhost:9999/red5"/>
		</exec>
	</target>
	<!-- 
		Requirements:
		1. Go here: http://subclipse.tigris.org/svnant.html

		2. Download SvnAnt
		ex: http://subclipse.tigris.org/files/documents/906/43359/svnant-1.2.1.zip

		3. Unzip the archive and place the jar files in your Ant lib directory
		ex: C:\dev\ant\lib	
	-->
	<!-- checks out the source tree -->
	<target name="checkout">
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="svnant.jar"/>
		<svn>
			<checkout url="${svn.url}java/client/trunk/" revision="HEAD" destPath="."/>
		</svn>
	</target>
	<!-- checks out the source tree from the top-most level -->
	<target name="checkout-all">
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="svnant.jar"/>
		<svn>
			<!-- we are three levels down -->
			<checkout url="${svn.url}" revision="HEAD" destPath="../../../"/>
		</svn>
	</target>
	<!-- Updates snapshot repository -->
	<target name="upload-snapshot" depends="jar">
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="svnant.jar"/>
		<condition property="java.version.name" value="java5" else="java6">
			<not>
				<isset property="java6.installed"/>
			</not>
		</condition>
		<svn username="${svn.login}" password="${svn.password}" failonerror="true">
			<update dir="${basedir}"/>
			<status path="build.xml" textStatusProperty="svn.info.status" lastChangedRevisionProperty="svn.info.lastrev"
				 revisionProperty="svn.info.rev"/>
		</svn>
		<echo message="Svn info - status: ${svn.info.status} last rev: ${svn.info.lastrev} rev: ${svn.info.rev}"/>
		<property name="snapshot.name" value="red5-${red5.version}-r${svn.info.rev}-${java.version.name}.jar"/>
		<property name="snapshot.path" value="../../../snapshots/"/>
		<echo message="Destination: ${snapshot.path}${snapshot.name}"/>
		<!-- make a copy of the red5-client.jar with a versioned name + the java version -->
		<move file="${dist.dir}/red5-client.jar" tofile="${snapshot.path}${snapshot.name}"/>
		<!-- check if the file is already versioned -->
		<svn username="${svn.login}" password="${svn.password}" failonerror="false">
			<status path="${svn.url}/snapshots/${snapshot.name}" textStatusProperty="svn.info.status"/>
		</svn>
		<echo message="Svn info - status: ${svn.info.status}"/>
		<condition property="add-file" value="true" else="false">
			<equals arg1="${svn.info.status}" arg2="unversioned"/>
		</condition>
		<echo message="File does not exist in repository: ${add-file}"/>
		<antcall target="svn-add" inheritAll="true" inheritRefs="true">
			<param name="file.path" value="${snapshot.path}${snapshot.name}"/>
		</antcall>
		<!--
			may need to add options depending upon svn client install
			javahl="true|false" svnkit="true|false" 
		-->
		<svn username="${svn.login}" password="${svn.password}" failonerror="false">
			<commit message="Added snapshot" file="${snapshot.path}${snapshot.name}"/>
		</svn>
	</target>
	<target name="svn-add" if="add-file">
		<svn username="${svn.login}" password="${svn.password}" failonerror="false">
			<add file="${file.path}" force="true"/>
		</svn>
	</target>
	<target name="all" depends="clean, prepare, compile, jar, javadoc" description="Run all server tasks"/>
	<target name="usage">
		<echo message="Type ant -p for available targets"/>
	</target>
</project>
